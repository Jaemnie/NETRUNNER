{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx\",\n  _s = $RefreshSig$();\n// import { Terminal } from \"@xterm/xterm\";\n// import \"../../node_modules/@xterm/xterm/css/xterm.css\";\n// import React, { useRef, useEffect, useState } from \"react\";\n// import {SocketResult} from \"./socket\";\n\n// const TermPage = ({text,onTerminalInput}) => {\n//   const terminalRef = useRef(); // DOM 요소 참조를 위한 ref\n//   const [t_terminal, setTerminal] = useState(null);\n\n//   useEffect(() => {\n//     if (terminalRef.current) {\n//       const terminal = new Terminal();\n//       terminal.onData((data) => {\n//         onTerminalInput(data);\n//       });\n//       let message = '';\n//       const sockets = new SocketResult();\n//       terminal.open(terminalRef.current);\n//       setTerminal(terminal);\n//       let currentInput = '';\n//       terminal.write('Welcome to NetRunner!\\r\\n');\n//       let currentPath = '/home/user';\n//       terminal.current('',currentPath);\n//       terminal.onKey(({ key, domEvent }) => {\n//           const char = key;\n//           if (domEvent.keyCode === 13) {  // Enter key\n//               message = currentInput;\n//               terminal.writeln('');\n//               sockets.sendMessage(message,currentPath);\n//               prompt('',currentPath);\n//               sockets.getMessage((chat) => {\n//                 terminal.write(chat);\n//                 terminal.writeln('');\n//                   prompt('',currentPath)\n//                   chat= '';\n//               });\n//               currentInput = '';\n//           } else if (domEvent.keyCode === 8) {\n//               // Backspace 처리\n//               if (currentInput.length > 0) {\n//                 terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n//                   currentInput = currentInput.slice(0, -1);\n//               }\n//           } else {\n//               currentInput += char;\n//               terminal.write(char);\n//           }\n//       });\n//       function prompt(ip, location) {\n//           if (location === \"/root\") {\n//               location = '~';\n//           }\n//           terminal.write(`${ip}root@root[${location}]$`);\n//       }\n//       return () => {\n//         terminal.dispose();\n//       };\n//     }\n\n//     if (text) {\n//       t_terminal.write(text);\n//       t_terminal.writeln('');\n//     }\n//   }, [text,onTerminalInput]);\n//   return <div ref={terminalRef}></div>;\n// }\n// export default TermPage;\n\nimport { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { SocketResult } from \"./socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TermPage = ({\n  text,\n  onTerminalInput\n}) => {\n  _s();\n  const terminalRef = useRef();\n  const [terminal, setTerminal] = useState();\n  useEffect(() => {\n    if (!terminal && terminalRef.current) {\n      const newTerminal = new Terminal();\n      newTerminal.onData(data => {\n        onTerminalInput(data);\n      });\n      newTerminal.open(terminalRef.current);\n      setTerminal(newTerminal);\n      const sockets = new SocketResult();\n      let currentInput = \"\";\n      let currentPath = \"/home/user\";\n      newTerminal.write(\"Welcome to NetRunner!\\r\\n\");\n      prompt(newTerminal, currentPath);\n      newTerminal.onKey(({\n        key,\n        domEvent\n      }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {\n          // Enter key\n          const message = currentInput;\n          newTerminal.writeln(\"\");\n          sockets.sendMessage(message, currentPath);\n          prompt(newTerminal, currentPath);\n          sockets.getMessage(chat => {\n            newTerminal.write(chat);\n            newTerminal.writeln(\"\");\n            prompt(newTerminal, currentPath);\n          });\n          currentInput = \"\";\n        } else if (domEvent.keyCode === 8) {\n          // Backspace 처리\n          if (currentInput.length > 0) {\n            newTerminal.write(\"\\b \\b\"); // 터미널에서 문자를 제거\n            currentInput = currentInput.slice(0, -1);\n          }\n        } else {\n          currentInput += char;\n          newTerminal.write(char);\n        }\n      });\n      return () => {\n        newTerminal.dispose();\n      };\n    }\n    if (terminal && text) {\n      terminal.write(text);\n      terminal.writeln(\"\");\n    }\n  }, [text, onTerminalInput, terminal, terminalRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: terminalRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 10\n  }, this);\n};\n_s(TermPage, \"E6C/nYKX9KZWSnHo86JhXhlsauQ=\");\n_c = TermPage;\nfunction prompt(terminal, location) {\n  if (location === \"/root\") {\n    location = \"~\";\n  }\n  terminal.write(`root@root[${location}]$`);\n}\nexport default TermPage;\nvar _c;\n$RefreshReg$(_c, \"TermPage\");","map":{"version":3,"names":["Terminal","React","useRef","useEffect","useState","SocketResult","jsxDEV","_jsxDEV","TermPage","text","onTerminalInput","_s","terminalRef","terminal","setTerminal","current","newTerminal","onData","data","open","sockets","currentInput","currentPath","write","prompt","onKey","key","domEvent","char","keyCode","message","writeln","sendMessage","getMessage","chat","length","slice","dispose","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","location","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx"],"sourcesContent":["// import { Terminal } from \"@xterm/xterm\";\n// import \"../../node_modules/@xterm/xterm/css/xterm.css\";\n// import React, { useRef, useEffect, useState } from \"react\";\n// import {SocketResult} from \"./socket\";\n\n// const TermPage = ({text,onTerminalInput}) => {\n//   const terminalRef = useRef(); // DOM 요소 참조를 위한 ref\n//   const [t_terminal, setTerminal] = useState(null);\n  \n//   useEffect(() => {\n//     if (terminalRef.current) {\n//       const terminal = new Terminal();\n//       terminal.onData((data) => {\n//         onTerminalInput(data);\n//       });\n//       let message = '';\n//       const sockets = new SocketResult();\n//       terminal.open(terminalRef.current);\n//       setTerminal(terminal);\n//       let currentInput = '';\n//       terminal.write('Welcome to NetRunner!\\r\\n');\n//       let currentPath = '/home/user';\n//       terminal.current('',currentPath);\n//       terminal.onKey(({ key, domEvent }) => {\n//           const char = key;\n//           if (domEvent.keyCode === 13) {  // Enter key\n//               message = currentInput;\n//               terminal.writeln('');\n//               sockets.sendMessage(message,currentPath);\n//               prompt('',currentPath);\n//               sockets.getMessage((chat) => {\n//                 terminal.write(chat);\n//                 terminal.writeln('');\n//                   prompt('',currentPath)\n//                   chat= '';\n//               });\n//               currentInput = '';\n//           } else if (domEvent.keyCode === 8) {\n//               // Backspace 처리\n//               if (currentInput.length > 0) {\n//                 terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n//                   currentInput = currentInput.slice(0, -1);\n//               }\n//           } else {\n//               currentInput += char;\n//               terminal.write(char);\n//           }\n//       });\n//       function prompt(ip, location) {\n//           if (location === \"/root\") {\n//               location = '~';\n//           }\n//           terminal.write(`${ip}root@root[${location}]$`);\n//       }\n//       return () => {\n//         terminal.dispose();\n//       };\n//     }\n\n//     if (text) {\n//       t_terminal.write(text);\n//       t_terminal.writeln('');\n//     }\n//   }, [text,onTerminalInput]);\n//   return <div ref={terminalRef}></div>;\n// }\n// export default TermPage;\n\nimport { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { SocketResult } from \"./socket\";\n\nconst TermPage = ({ text, onTerminalInput }) => {\n  const terminalRef = useRef();\n  const [terminal, setTerminal] = useState();\n\n  useEffect(() => {\n    if (!terminal && terminalRef.current) {\n      const newTerminal = new Terminal();\n      newTerminal.onData((data) => {\n        onTerminalInput(data);\n      });\n      newTerminal.open(terminalRef.current);\n      setTerminal(newTerminal);\n\n      const sockets = new SocketResult();\n      let currentInput = \"\";\n      let currentPath = \"/home/user\";\n\n      newTerminal.write(\"Welcome to NetRunner!\\r\\n\");\n      prompt(newTerminal, currentPath);\n\n      newTerminal.onKey(({ key, domEvent }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {\n          // Enter key\n          const message = currentInput;\n          newTerminal.writeln(\"\");\n          sockets.sendMessage(message, currentPath);\n          prompt(newTerminal, currentPath);\n          sockets.getMessage((chat) => {\n            newTerminal.write(chat);\n            newTerminal.writeln(\"\");\n            prompt(newTerminal, currentPath);\n          });\n          currentInput = \"\";\n        } else if (domEvent.keyCode === 8) {\n          // Backspace 처리\n          if (currentInput.length > 0) {\n            newTerminal.write(\"\\b \\b\"); // 터미널에서 문자를 제거\n            currentInput = currentInput.slice(0, -1);\n          }\n        } else {\n          currentInput += char;\n          newTerminal.write(char);\n        }\n      });\n\n      return () => {\n        newTerminal.dispose();\n      };\n    }\n\n    if (terminal && text) {\n      terminal.write(text);\n      terminal.writeln(\"\");\n    }\n  }, [text, onTerminalInput, terminal, terminalRef]);\n\n  return <div ref={terminalRef} style={{ width: \"100%\", height: \"100%\"}}/>;\n};\n\nfunction prompt(terminal, location) {\n  if (location === \"/root\") {\n    location = \"~\";\n  }\n  terminal.write(`root@root[${location}]$`);\n}\n\nexport default TermPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx\",\n  _s = $RefreshSig$();\nimport { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\n// import { Termi } from \"../pages/mainPages/temp/terminal\";\nimport { Termi } from \"./termsocket\";\nimport DirectoryViewer from \"./fileSystem\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TermPage = () => {\n  _s();\n  const terminalRef = useRef(); // DOM 요소 참조를 위한 ref\n  useEffect(() => {\n    if (terminalRef.current) {\n      // let message = '';\n      // let currentInput = '';\n      const term = new Terminal();\n      Termi(term, terminalRef.current);\n      // term.open(terminalRef.current);\n      // term.onKey(({ key, domEvent }) => {\n      //   const char = key;\n      //   if (domEvent.keyCode === 13) {  // Enter key\n      //     term.writeln('');\n      //     sockets.getMessage((chat) => {\n      //       term.write(chat);\n      //       term.writeln('');\n      //       prompt('', currentPath)\n      //       chat = '';\n      //     });\n      //     currentInput = '';\n      //   } else if (domEvent.keyCode === 8) {\n      //     // Backspace 처리\n      //     if (currentInput.length > 0) {\n      //       term.write('\\b \\b'); // 터미널에서 문자를 제거\n      //       currentInput = currentInput.slice(0, -1);\n      //     }\n      //   } else {\n      //     currentInput += char;\n      //     term.write(char);\n      //   }\n      // });\n      return () => {\n        term.dispose(); // Terminal 인스턴스 정리\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DirectoryViewer, {\n      initialPath: \"/home/user\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: terminalRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(TermPage, \"kEUNaEDsXq6NFlYUDdaogKRz/hM=\");\n_c = TermPage;\nexport default TermPage;\nvar _c;\n$RefreshReg$(_c, \"TermPage\");","map":{"version":3,"names":["Terminal","React","useRef","useEffect","useState","Termi","DirectoryViewer","jsxDEV","_jsxDEV","Fragment","_Fragment","TermPage","_s","terminalRef","current","term","dispose","children","initialPath","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","width","height","_c","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx"],"sourcesContent":["import { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\n// import { Termi } from \"../pages/mainPages/temp/terminal\";\nimport { Termi } from \"./termsocket\";\nimport DirectoryViewer from \"./fileSystem\";\nconst TermPage = () => {\n  const terminalRef = useRef(); // DOM 요소 참조를 위한 ref\n  useEffect(() => {\n    if (terminalRef.current) {\n      // let message = '';\n      // let currentInput = '';\n      const term = new Terminal();\n      Termi(term,terminalRef.current);\n      // term.open(terminalRef.current);\n      // term.onKey(({ key, domEvent }) => {\n      //   const char = key;\n      //   if (domEvent.keyCode === 13) {  // Enter key\n      //     term.writeln('');\n      //     sockets.getMessage((chat) => {\n      //       term.write(chat);\n      //       term.writeln('');\n      //       prompt('', currentPath)\n      //       chat = '';\n      //     });\n      //     currentInput = '';\n      //   } else if (domEvent.keyCode === 8) {\n      //     // Backspace 처리\n      //     if (currentInput.length > 0) {\n      //       term.write('\\b \\b'); // 터미널에서 문자를 제거\n      //       currentInput = currentInput.slice(0, -1);\n      //     }\n      //   } else {\n      //     currentInput += char;\n      //     term.write(char);\n      //   }\n      // });\n      return () => {\n        term.dispose(); // Terminal 인스턴스 정리\n      };\n    }\n  }, []);\n  return (<>\n    {/* DirectoryViewer 컴포넌트로 파일 시스템 내용을 렌더링 */}\n    <DirectoryViewer initialPath=\"/home/user\" />\n    <div ref={terminalRef} style={{ width: \"100%\", height: \"100%\" }}></div>\n  </>\n  );\n}\nexport default TermPage;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,cAAc;AACvC,OAAO,+CAA+C;AACtD,OAAOC,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D;AACA,SAASC,KAAK,QAAQ,cAAc;AACpC,OAAOC,eAAe,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAC3C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,WAAW,GAAGX,MAAM,CAAC,CAAC,CAAC,CAAC;EAC9BC,SAAS,CAAC,MAAM;IACd,IAAIU,WAAW,CAACC,OAAO,EAAE;MACvB;MACA;MACA,MAAMC,IAAI,GAAG,IAAIf,QAAQ,CAAC,CAAC;MAC3BK,KAAK,CAACU,IAAI,EAACF,WAAW,CAACC,OAAO,CAAC;MAC/B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,OAAO,MAAM;QACXC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;EACN,oBAAQR,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBAENT,OAAA,CAACF,eAAe;MAACY,WAAW,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5Cd,OAAA;MAAKe,GAAG,EAAEV,WAAY;MAACW,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eACvE,CAAC;AAEL,CAAC;AAAAV,EAAA,CA1CKD,QAAQ;AAAAgB,EAAA,GAARhB,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
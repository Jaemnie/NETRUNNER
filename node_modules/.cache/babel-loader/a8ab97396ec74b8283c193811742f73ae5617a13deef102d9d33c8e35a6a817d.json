{"ast":null,"code":"class AuthService {\n  signup(userId, username, password, email) {\n    fetch('http://172.16.230.134:4000/auth/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        username,\n        password,\n        email\n      })\n    }).then(() => {\n      console.log('회원가입이 완료되었습니다.');\n    }).catch(error => console.error(\"회원가입 에러:\", error));\n  }\n  login(userId, password) {\n    return fetch('http://172.16.230.134:4000/auth/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.accessToken) {\n        // JWT를 로컬 저장소에 저장\n        localStorage.setItem('accessToken', data.accessToken);\n        return true; // 로그인 성공\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n        return false; // 로그인 실패\n      }\n    }).catch(error => {\n      console.error('로그인 에러:', error);\n      return false; // 로그인 실패\n    });\n  }\n  logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    window.location.href = '/';\n    // 로그아웃 처리를 위해 서버에 요청을 보냄\n    fetch('http://172.16.230.134:4000/auth/signout', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    }).then(() => {\n      console.log('로그아웃 되었습니다.');\n    }).catch(error => console.error('로그아웃 에러:', error));\n  }\n  changepass(email, password) {\n    fetch('http://172.16.230.134:4000/auth/changepass', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(() => {\n      console.log('비밀번호가 변경되었습니다.');\n    }).catch(error => console.error(\"잘못된 요청:\", error));\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["AuthService","signup","userId","username","password","email","fetch","method","headers","body","JSON","stringify","then","console","log","catch","error","login","response","json","data","accessToken","localStorage","setItem","logout","removeItem","window","location","href","getItem","changepass"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["class AuthService {\n\n  signup(userId, username, password, email) {\n    fetch('http://172.16.230.134:4000/auth/signup', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId, username, password, email }),\n    })\n    .then(() => {\n      console.log('회원가입이 완료되었습니다.');\n    })\n    .catch(error => console.error(\"회원가입 에러:\", error));\n  }\n\n  login(userId, password) {\n    return fetch('http://172.16.230.134:4000/auth/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId, password }),\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.accessToken) {\n        // JWT를 로컬 저장소에 저장\n        localStorage.setItem('accessToken', data.accessToken);\n        return true; // 로그인 성공\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n        return false; // 로그인 실패\n      }\n    })\n    .catch(error => {\n      console.error('로그인 에러:', error);\n      return false; // 로그인 실패\n    });\n  }\n\n  logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    window.location.href = '/';\n    // 로그아웃 처리를 위해 서버에 요청을 보냄\n    fetch('http://172.16.230.134:4000/auth/signout', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n      },\n    })\n    .then(() => {\n      console.log('로그아웃 되었습니다.');\n    })\n    .catch(error => console.error('로그아웃 에러:', error));\n  }\n\n  changepass(email, password) {\n    fetch('http://172.16.230.134:4000/auth/changepass', {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n    .then(() => {\n      console.log('비밀번호가 변경되었습니다.');\n    })\n    .catch(error => console.error(\"잘못된 요청:\", error));\n  }\n}\n\nexport default AuthService;\n"],"mappings":"AAAA,MAAMA,WAAW,CAAC;EAEhBC,MAAMA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IACxCC,KAAK,CAAC,wCAAwC,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAAEC,QAAQ;QAAEC,QAAQ;QAAEC;MAAM,CAAC;IAC5D,CAAC,CAAC,CACDO,IAAI,CAAC,MAAM;MACVC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC,CAAC;EACnD;EAEAC,KAAKA,CAACf,MAAM,EAAEE,QAAQ,EAAE;IACtB,OAAOE,KAAK,CAAC,wCAAwC,EAAE;MACrDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAAEE;MAAS,CAAC;IAC3C,CAAC,CAAC,CACDQ,IAAI,CAACM,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACQ,IAAI,IAAI;MACZ,IAAIA,IAAI,CAACC,WAAW,EAAE;QACpB;QACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACC,WAAW,CAAC;QACrD,OAAO,IAAI,CAAC,CAAC;MACf,CAAC,MAAM;QACLR,OAAO,CAACG,KAAK,CAAC,kBAAkB,CAAC;QACjC,OAAO,KAAK,CAAC,CAAC;MAChB;IACF,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC,CAAC;EACJ;EAEAQ,MAAMA,CAAA,EAAG;IACP;IACAF,YAAY,CAACG,UAAU,CAAC,aAAa,CAAC;IACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC1B;IACAtB,KAAK,CAAC,yCAAyC,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAG,UAASc,YAAY,CAACO,OAAO,CAAC,aAAa,CAAE;MACjE;IACF,CAAC,CAAC,CACDjB,IAAI,CAAC,MAAM;MACVC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC,CAAC;EACnD;EAEAc,UAAUA,CAACzB,KAAK,EAAED,QAAQ,EAAE;IAC1BE,KAAK,CAAC,4CAA4C,EAAE;MAClDC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN,KAAK;QAAED;MAAS,CAAC;IAC1C,CAAC,CAAC,CACDQ,IAAI,CAAC,MAAM;MACVC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC,CAAC;EAClD;AACF;AAEA,eAAehB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\NETRUNNER\\\\src\\\\components\\\\Background\\\\AudioContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// AudioContext 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioContext = /*#__PURE__*/createContext();\n\n// AudioContext를 사용하는 커스텀 훅\nexport const useAudio = () => {\n  _s();\n  return useContext(AudioContext);\n};\n\n// AudioProvider 컴포넌트 정의\n_s(useAudio, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AudioProvider = ({\n  children\n}) => {\n  _s2();\n  const [isMuted, setIsMuted] = useState(false); // 음소거 상태 관리\n\n  // 음소거 상태를 토글하는 함수\n  const toggleMute = () => {\n    setIsMuted(prevIsMuted => !prevIsMuted);\n  };\n  return (\n    /*#__PURE__*/\n    // AudioContext.Provider로 감싸고, 값으로 isMuted와 toggleMute를 제공\n    _jsxDEV(AudioContext.Provider, {\n      value: {\n        isMuted,\n        toggleMute\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s2(AudioProvider, \"X5OQ1lfso32t+hl9x/r7wjVuwPw=\");\n_c = AudioProvider;\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AudioContext","useAudio","_s","AudioProvider","children","_s2","isMuted","setIsMuted","toggleMute","prevIsMuted","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/NETRUNNER/src/components/Background/AudioContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\n// AudioContext 생성\r\nconst AudioContext = createContext();\r\n\r\n// AudioContext를 사용하는 커스텀 훅\r\nexport const useAudio = () => useContext(AudioContext);\r\n\r\n// AudioProvider 컴포넌트 정의\r\nexport const AudioProvider = ({ children }) => {\r\n  const [isMuted, setIsMuted] = useState(false); // 음소거 상태 관리\r\n\r\n  // 음소거 상태를 토글하는 함수\r\n  const toggleMute = () => {\r\n    setIsMuted((prevIsMuted) => !prevIsMuted);\r\n  };\r\n\r\n  return (\r\n    // AudioContext.Provider로 감싸고, 값으로 isMuted와 toggleMute를 제공\r\n    <AudioContext.Provider value={{ isMuted, toggleMute }}>\r\n      {children}\r\n    </AudioContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMM,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAML,UAAU,CAACG,YAAY,CAAC;AAAA;;AAEtD;AAAAE,EAAA,CAFaD,QAAQ;AAGrB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACvBD,UAAU,CAAEE,WAAW,IAAK,CAACA,WAAW,CAAC;EAC3C,CAAC;EAED;IAAA;IACE;IACAV,OAAA,CAACC,YAAY,CAACU,QAAQ;MAACC,KAAK,EAAE;QAAEL,OAAO;QAAEE;MAAW,CAAE;MAAAJ,QAAA,EACnDA;IAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY;EAAC;AAE5B,CAAC;AAACV,GAAA,CAdWF,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
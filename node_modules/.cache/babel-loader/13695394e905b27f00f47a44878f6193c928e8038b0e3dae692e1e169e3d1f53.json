{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { SocketResult } from \"./socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TermPage = ({\n  term,\n  text,\n  onTerminalInput\n}) => {\n  _s();\n  const terminalRef = useRef(null);\n  const [terminal, setTerminal] = useState(null);\n  useEffect(() => {\n    if (!terminal && terminalRef.current) {\n      try {\n        const newTerminal = term;\n        newTerminal.onData(data => {\n          onTerminalInput(data);\n        });\n        newTerminal.open(terminalRef.current);\n        setTerminal(newTerminal);\n        const sockets = new SocketResult();\n        let currentInput = \"\";\n        let currentPath = \"/home/user\";\n        newTerminal.write(\"Welcome to NetRunner!\\r\\n\");\n        prompt(newTerminal, currentPath);\n        newTerminal.onKey(({\n          key,\n          domEvent\n        }) => {\n          const char = key;\n          if (domEvent.keyCode === 13) {\n            // Enter key\n            const message = currentInput;\n            newTerminal.writeln(\"\");\n            sockets.sendMessage(message, currentPath);\n            prompt(newTerminal, currentPath);\n            sockets.getMessage(chat => {\n              newTerminal.write(chat);\n              newTerminal.writeln(\"\");\n              prompt(newTerminal, currentPath);\n            });\n            currentInput = \"\";\n          } else if (domEvent.keyCode === 8) {\n            // Backspace 처리\n            if (currentInput.length > 0) {\n              newTerminal.write(\"\\b \\b\"); // 터미널에서 문자를 제거\n              currentInput = currentInput.slice(0, -1);\n            }\n          } else {\n            currentInput += char;\n            newTerminal.write(char);\n          }\n        });\n        return () => {\n          newTerminal.dispose();\n        };\n      } catch (error) {\n        console.error(\"Error initializing terminal:\", error);\n      }\n    }\n    if (terminal && text) {\n      terminal.write(text);\n      terminal.writeln(\"\");\n    }\n  }, [term, text, onTerminalInput, terminal, terminalRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: terminalRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(TermPage, \"9OdsrfopgPy7MulkzcjF6lDSypc=\");\n_c = TermPage;\nfunction prompt(terminal, location) {\n  if (location === \"/root\") {\n    location = \"~\";\n  }\n  terminal.write(`root@root[${location}]$`);\n}\nexport default TermPage;\nvar _c;\n$RefreshReg$(_c, \"TermPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","SocketResult","jsxDEV","_jsxDEV","TermPage","term","text","onTerminalInput","_s","terminalRef","terminal","setTerminal","current","newTerminal","onData","data","open","sockets","currentInput","currentPath","write","prompt","onKey","key","domEvent","char","keyCode","message","writeln","sendMessage","getMessage","chat","length","slice","dispose","error","console","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","location","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { SocketResult } from \"./socket\";\n\nconst TermPage = ({term, text, onTerminalInput }) => {\n  const terminalRef = useRef(null);\n  const [terminal, setTerminal] = useState(null);\n  useEffect(() => {\n    if (!terminal && terminalRef.current) {\n      try {\n        const newTerminal = term;\n        newTerminal.onData((data) => {\n          onTerminalInput(data);\n        });\n        newTerminal.open(terminalRef.current);\n        setTerminal(newTerminal);\n\n        const sockets = new SocketResult();\n        let currentInput = \"\";\n        let currentPath = \"/home/user\";\n\n        newTerminal.write(\"Welcome to NetRunner!\\r\\n\");\n        prompt(newTerminal, currentPath);\n\n        newTerminal.onKey(({ key, domEvent }) => {\n          const char = key;\n          if (domEvent.keyCode === 13) {\n            // Enter key\n            const message = currentInput;\n            newTerminal.writeln(\"\");\n            sockets.sendMessage(message, currentPath);\n            prompt(newTerminal, currentPath);\n            sockets.getMessage((chat) => {\n              newTerminal.write(chat);\n              newTerminal.writeln(\"\");\n              prompt(newTerminal, currentPath);\n            });\n            currentInput = \"\";\n          } else if (domEvent.keyCode === 8) {\n            // Backspace 처리\n            if (currentInput.length > 0) {\n              newTerminal.write(\"\\b \\b\"); // 터미널에서 문자를 제거\n              currentInput = currentInput.slice(0, -1);\n            }\n          } else {\n            currentInput += char;\n            newTerminal.write(char);\n          }\n        });\n\n        return () => {\n          newTerminal.dispose();\n        };\n      } catch (error) {\n        console.error(\"Error initializing terminal:\", error);\n      }\n    }\n\n    if (terminal && text) {\n      terminal.write(text);\n      terminal.writeln(\"\");\n    }\n  }, [term,text, onTerminalInput, terminal, terminalRef]);\n\n  return <div ref={terminalRef} style={{ width: \"100%\", height: \"100%\"}} />;\n};\n\nfunction prompt(terminal, location) {\n  if (location === \"/root\") {\n    location = \"~\";\n  }\n  terminal.write(`root@root[${location}]$`);\n}\n\nexport default TermPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
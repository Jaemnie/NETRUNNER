{"ast":null,"code":"class AuthService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://netrunner.life:4000';\n  }\n  async signup(userId, username, password, email) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          username,\n          password,\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`회원가입 실패: ${response.statusText}`);\n      }\n      console.log('회원가입이 완료되었습니다.');\n    } catch (error) {\n      console.error('회원가입 에러:', error);\n    }\n  }\n  async login(userId, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`로그인 실패: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('userId', userId); // userId 저장\n        return true; // 로그인 성공\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n        return false; // 로그인 실패\n      }\n    } catch (error) {\n      console.error('로그인 에러:', error);\n      return false; // 로그인 실패\n    }\n  }\n  async logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('userId'); // userId 삭제\n    window.location.href = '/';\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signout`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`로그아웃 실패: ${response.statusText}`);\n      }\n      console.log('로그아웃 되었습니다.');\n    } catch (error) {\n      console.error('로그아웃 에러:', error);\n    }\n  }\n  async changepass(email, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/changepass`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`비밀번호 변경 실패: ${response.statusText}`);\n      }\n      console.log('비밀번호가 변경되었습니다.');\n    } catch (error) {\n      console.error('비밀번호 변경 에러:', error);\n    }\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["AuthService","constructor","baseUrl","process","env","REACT_APP_API_URL","signup","userId","username","password","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","console","log","error","login","data","json","accessToken","localStorage","setItem","logout","removeItem","window","location","href","getItem","changepass"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["class AuthService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://netrunner.life:4000';\n  }\n\n  async signup(userId, username, password, email) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signup`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, username, password, email }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`회원가입 실패: ${response.statusText}`);\n      }\n\n      console.log('회원가입이 완료되었습니다.');\n    } catch (error) {\n      console.error('회원가입 에러:', error);\n    }\n  }\n\n  async login(userId, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signin`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`로그인 실패: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('userId', userId); // userId 저장\n        return true; // 로그인 성공\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n        return false; // 로그인 실패\n      }\n    } catch (error) {\n      console.error('로그인 에러:', error);\n      return false; // 로그인 실패\n    }\n  }\n\n  async logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('userId'); // userId 삭제\n    window.location.href = '/';\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signout`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`로그아웃 실패: ${response.statusText}`);\n      }\n\n      console.log('로그아웃 되었습니다.');\n    } catch (error) {\n      console.error('로그아웃 에러:', error);\n    }\n  }\n\n  async changepass(email, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/changepass`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`비밀번호 변경 실패: ${response.statusText}`);\n      }\n\n      console.log('비밀번호가 변경되었습니다.');\n    } catch (error) {\n      console.error('비밀번호 변경 에러:', error);\n    }\n  }\n}\n\nexport default AuthService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
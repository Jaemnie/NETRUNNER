{"ast":null,"code":"import { FileSystem } from \"./fileSystems.js\";\n// const terminal = new Terminal();\n// document.addEventListener('DOMContentLoaded', termi(terminal));\nfunction termi(terminal2) {\n  const terminal = terminal2;\n  terminal.open(document.getElementById('term'));\n  let currentInput = '';\n  terminal.write('Welcome to NetRunner!\\r\\n');\n  let currentPath = '/home/user';\n  const fs = new FileSystem();\n  fs.createDirectory(\"/root\");\n  fs.createDirectory(\"/tmp\");\n  fs.createDirectory(\"/home/user\");\n  fs.createFile(\"/home/user/file1.txt\");\n  fs.createFile(\"/home/user/file2.txt\");\n  fs.createDirectory(\"/home/user/documents\");\n  fs.createFile(\"/home/user/documents/document1.txt\");\n  prompt(currentPath);\n  terminal.onKey(({\n    key,\n    domEvent\n  }) => {\n    const char = key;\n    if (domEvent.keyCode === 13) {\n      // Enter key\n      terminal.writeln('');\n      const command = currentInput.trim().split(\" \");\n      switch (command[0]) {\n        case 'pwd':\n          terminal.write(fs.getPathInfo(currentPath).absolutePath + '\\r\\n');\n          break;\n        case 'cd':\n          console.log(command[1]);\n          if (command[1] === undefined) {\n            currentPath = \"/root\";\n          } else if (command[1] == '..') {\n            if (currentPath == '/') {\n              currentPath = '/';\n            } else {\n              let lastPath = currentPath.lastIndexOf(\"/\");\n              let temp = currentPath.substring(0, lastPath);\n              currentPath = temp;\n            }\n          } else if (fs.isOverlap(command[1], currentPath) == false) {\n            currentPath += \"/\" + command[1];\n          } else if (fs.findDirectory(command[1]) == true) {\n            currentPath = command[1];\n          } else {\n            terminal.write(\"No such path found\\r\\n\");\n          }\n          break;\n        case 'cat':\n          break;\n        case 'ls':\n          for (const key in fs.getPathInfo(currentPath).files) {\n            terminal.write(fs.getPathInfo(currentPath).files[key]);\n            if (command[1] == \"-al\") {\n              terminal.write(\"[\" + fs.getPathInfo(currentPath).filestype[key] + \"]\");\n            }\n            terminal.write(\" \");\n          }\n          terminal.write(\"\\r\\n\");\n          break;\n        case 'help':\n          terminal.write('Commands:\\r\\nls - List files\\r\\nhelp - Show this help message\\r\\n');\n          break;\n        case 'cp':\n          break;\n        case 'mv':\n          break;\n        case 'rm':\n          let temp5 = currentPath;\n          if (command[1] == \"*\") {\n            fs.deleteDirectory(currentPath);\n            fs.createDirectory(currentPath);\n          }\n          if (fs.isOverlap(command[1], currentPath) == false) {\n            for (const key in fs.getPathInfo(currentPath).files) {\n              if (fs.getPathInfo(currentPath).files[key] == command[1]) {\n                if (fs.getPathInfo(currentPath).filestype[key] == \"file\") {\n                  fs.deleteFile(temp5 += \"/\" + command[1]);\n                } else {\n                  fs.deleteDirectory(temp5 += \"/\" + command[1]);\n                }\n              }\n            }\n          }\n          break;\n        case 'clear':\n          terminal.clear();\n          break;\n        case 'mkdir':\n          let temp2 = currentPath;\n          temp2 += \"/\" + command[1];\n          fs.createDirectory(temp2);\n          break;\n        case 'rmdir':\n          let temp3 = currentPath;\n          temp3 += \"/\" + command[1];\n          fs.deleteDirectory(temp3);\n          break;\n        case 'touch':\n          let temp4 = currentPath;\n          temp4 += \"/\" + command[1];\n          fs.createFile(temp4);\n          break;\n        case 'vi':\n          break;\n        case 'ps':\n          break;\n        case 'kill':\n          break;\n        case 'nmap':\n          break;\n        case 'porthack':\n          break;\n        case 'scp':\n          break;\n        case 'sshcrack':\n          break;\n        case 'scan':\n          break;\n        case 'connect':\n          break;\n        case 'disconnect':\n          break;\n        default:\n          terminal.write('Unknown command\\r\\n');\n          break;\n      }\n      currentInput = '';\n      prompt(currentPath);\n    } else if (domEvent.keyCode === 8) {\n      // Backspace 처리\n      if (currentInput.length > 0) {\n        terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n        currentInput = currentInput.slice(0, -1);\n      }\n    } else {\n      currentInput += char;\n      terminal.write(char);\n    }\n  });\n  function prompt(ip, location) {\n    if (location == \"/root\") {\n      location = '~';\n    }\n    terminal.write(`${ip}root@root[${location}]$`);\n  }\n}\nexport { termi };","map":{"version":3,"names":["FileSystem","termi","terminal2","terminal","open","document","getElementById","currentInput","write","currentPath","fs","createDirectory","createFile","prompt","onKey","key","domEvent","char","keyCode","writeln","command","trim","split","getPathInfo","absolutePath","console","log","undefined","lastPath","lastIndexOf","temp","substring","isOverlap","findDirectory","files","filestype","temp5","deleteDirectory","deleteFile","clear","temp2","temp3","temp4","length","slice","ip","location"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/pages/mainPages/tlqkf/terminal.js"],"sourcesContent":["import { FileSystem } from \"./fileSystems.js\";\n// const terminal = new Terminal();\n// document.addEventListener('DOMContentLoaded', termi(terminal));\nfunction termi(terminal2) {\n    const terminal = terminal2;\n    terminal.open(document.getElementById('term'));\n    let currentInput = '';\n    terminal.write('Welcome to NetRunner!\\r\\n');\n    let currentPath = '/home/user';\n    const fs = new FileSystem();\n    fs.createDirectory(\"/root\");\n    fs.createDirectory(\"/tmp\");\n    fs.createDirectory(\"/home/user\")\n    fs.createFile(\"/home/user/file1.txt\");\n    fs.createFile(\"/home/user/file2.txt\");\n    fs.createDirectory(\"/home/user/documents\");\n    fs.createFile(\"/home/user/documents/document1.txt\");\n    prompt(currentPath);\n    terminal.onKey(({ key, domEvent }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {  // Enter key\n            terminal.writeln('');\n            const command = currentInput.trim().split(\" \");\n            switch (command[0]) {\n                case 'pwd':\n                    terminal.write(fs.getPathInfo(currentPath).absolutePath + '\\r\\n');\n                    break;\n                case 'cd':\n                    console.log(command[1]);\n                    if (command[1] === undefined) {\n                        currentPath = \"/root\";\n                    } else if (command[1] == '..') {\n                        if (currentPath == '/') {\n                            currentPath = '/';\n                        } else {\n                            let lastPath = currentPath.lastIndexOf(\"/\");\n                            let temp = currentPath.substring(0, lastPath);\n                            currentPath = temp;\n                        }\n                    } else if (fs.isOverlap(command[1], currentPath) == false) {\n                        currentPath += (\"/\" + command[1]);\n                    } else if (fs.findDirectory(command[1]) == true) {\n                        currentPath = command[1];\n                    } else {\n                        terminal.write(\"No such path found\\r\\n\");\n                    }\n                    break;\n                case 'cat':\n                    break;\n                case 'ls':\n                    for (const key in fs.getPathInfo(currentPath).files) {\n                        terminal.write(fs.getPathInfo(currentPath).files[key]);\n                        if (command[1] == \"-al\") {\n                            terminal.write(\"[\" + fs.getPathInfo(currentPath).filestype[key] + \"]\");\n                        }\n                        terminal.write(\" \");\n                    }\n                    terminal.write(\"\\r\\n\");\n                    break;\n                case 'help':\n                    terminal.write('Commands:\\r\\nls - List files\\r\\nhelp - Show this help message\\r\\n');\n                    break;\n                case 'cp':\n                    break;\n                case 'mv':\n                    break;\n                case 'rm':\n                    let temp5 = currentPath;\n                    if (command[1] == \"*\") {\n                        fs.deleteDirectory(currentPath);\n                        fs.createDirectory(currentPath);\n                    }\n                    if (fs.isOverlap(command[1], currentPath) == false) {\n                        for (const key in fs.getPathInfo(currentPath).files) {\n                            if (fs.getPathInfo(currentPath).files[key] == command[1]) {\n                                if (fs.getPathInfo(currentPath).filestype[key] == \"file\") {\n                                    fs.deleteFile(temp5 += (\"/\" + command[1]));\n                                } else {\n                                    fs.deleteDirectory(temp5 += (\"/\" + command[1]));\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'clear':\n                    terminal.clear();\n                    break;\n                case 'mkdir':\n                    let temp2 = currentPath;\n                    temp2 += (\"/\" + command[1]);\n                    fs.createDirectory(temp2);\n                    break;\n                case 'rmdir':\n                    let temp3 = currentPath;\n                    temp3 += (\"/\" + command[1]);\n                    fs.deleteDirectory(temp3);\n                    break;\n                case 'touch':\n                    let temp4 = currentPath;\n                    temp4 += (\"/\" + command[1]);\n                    fs.createFile(temp4);\n                    break;\n                case 'vi':\n                    break;\n\n\n                case 'ps':\n                    break;\n                case 'kill':\n                    break;\n                case 'nmap':\n                    break;\n                case 'porthack':\n                    break;\n                case 'scp':\n                    break;\n                case 'sshcrack':\n                    break;\n                case 'scan':\n                    break;\n                case 'connect':\n                    break;\n                case 'disconnect':\n                    break;\n\n\n                default:\n                    terminal.write('Unknown command\\r\\n');\n                    break;\n            }\n            currentInput = '';\n            prompt(currentPath);\n        } else if (domEvent.keyCode === 8) {\n            // Backspace 처리\n            if (currentInput.length > 0) {\n                terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n                currentInput = currentInput.slice(0, -1);\n            }\n        } else {\n            currentInput += char;\n            terminal.write(char);\n        }\n    });\n    function prompt(ip, location) {\n        if (location == \"/root\") {\n            location = '~';\n        }\n        terminal.write(`${ip}root@root[${location}]$`);\n    }\n}\n\nexport { termi };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
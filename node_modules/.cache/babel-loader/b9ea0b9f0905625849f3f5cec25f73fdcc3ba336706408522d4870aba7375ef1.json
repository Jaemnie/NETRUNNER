{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { SocketResult } from \"./socket\";\nfunction Termi(terminal2, elements) {\n  // const token = localStorage.getItem('accessToken');\n  // const socket = io('http://localhost:4000/term',{\n  //     query: { token }\n  // }); // NestJS 서버 주소\n\n  let message = '';\n  let chat = [];\n\n  // socket.on('message',(payload)=>{\n  //     chat = payload;\n  // });\n  // const sendMessage = () => {\n  //     socket.emit('message',message);\n  //     message = '';\n  // }\n\n  const sockets = new SocketResult();\n  const terminal = terminal2;\n  terminal.open(elements);\n  let currentInput = '';\n  terminal.write('Welcome to NetRunner!\\r\\n');\n  let currentPath = '/home/user';\n  prompt('', currentPath);\n  terminal.onKey(({\n    key,\n    domEvent\n  }) => {\n    const char = key;\n    if (domEvent.keyCode === 13) {\n      // Enter key\n      message = currentInput;\n      terminal.writeln('');\n      // setMessage(currentInput);\n      // sendMessage();\n      // terminal.write(chat);\n\n      // sendMessage();\n      sockets.sendMessage(message);\n      prompt('', currentPath);\n      sockets.getMessage(chat => {\n        terminal.write(chat);\n        chat = '';\n      });\n      // char = sockets.getMessage();\n      // terminal.write(chat);\n      currentInput = '';\n    } else if (domEvent.keyCode === 8) {\n      // Backspace 처리\n      if (currentInput.length > 0) {\n        terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n        currentInput = currentInput.slice(0, -1);\n      }\n    } else {\n      currentInput += char;\n      terminal.write(char);\n    }\n  });\n  function prompt(ip, location) {\n    if (location == \"/root\") {\n      location = '~';\n    }\n    terminal.write(`${ip}root@root[${location}]$`);\n  }\n}\n_c = Termi;\nexport { Termi };\nvar _c;\n$RefreshReg$(_c, \"Termi\");","map":{"version":3,"names":["useState","useEffect","io","SocketResult","Termi","terminal2","elements","message","chat","sockets","terminal","open","currentInput","write","currentPath","prompt","onKey","key","domEvent","char","keyCode","writeln","sendMessage","getMessage","length","slice","ip","location","_c","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termsocket.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport {SocketResult} from \"./socket\";\n\nfunction Termi(terminal2,elements) {\n\n    // const token = localStorage.getItem('accessToken');\n    // const socket = io('http://localhost:4000/term',{\n    //     query: { token }\n    // }); // NestJS 서버 주소\n\n\n    let message = '';\n    let chat = [];\n\n    // socket.on('message',(payload)=>{\n    //     chat = payload;\n    // });\n    // const sendMessage = () => {\n    //     socket.emit('message',message);\n    //     message = '';\n    // }\n\n    const sockets = new SocketResult();\n\n    const terminal = terminal2;\n    terminal.open(elements);\n    let currentInput = '';\n    terminal.write('Welcome to NetRunner!\\r\\n');\n    let currentPath = '/home/user';\n    prompt('',currentPath);\n    terminal.onKey(({ key, domEvent }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {  // Enter key\n            message = currentInput;\n            terminal.writeln('');\n            // setMessage(currentInput);\n            // sendMessage();\n            // terminal.write(chat);\n            \n            // sendMessage();\n            sockets.sendMessage(message);\n            prompt('',currentPath);\n            sockets.getMessage((chat) => {\n                terminal.write(chat);\n                chat= '';\n            });\n            // char = sockets.getMessage();\n            // terminal.write(chat);\n            currentInput = '';\n\n\n        } else if (domEvent.keyCode === 8) {\n            // Backspace 처리\n            if (currentInput.length > 0) {\n                terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n                currentInput = currentInput.slice(0, -1);\n            }\n        } else {\n            currentInput += char;\n            terminal.write(char);\n        }\n    });\n    function prompt(ip, location) {\n        if (location == \"/root\") {\n            location = '~';\n        }\n        terminal.write(`${ip}root@root[${location}]$`);\n    }\n}\n\nexport { Termi };\n\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAAQC,YAAY,QAAO,UAAU;AAErC,SAASC,KAAKA,CAACC,SAAS,EAACC,QAAQ,EAAE;EAE/B;EACA;EACA;EACA;;EAGA,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,IAAI,GAAG,EAAE;;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,OAAO,GAAG,IAAIN,YAAY,CAAC,CAAC;EAElC,MAAMO,QAAQ,GAAGL,SAAS;EAC1BK,QAAQ,CAACC,IAAI,CAACL,QAAQ,CAAC;EACvB,IAAIM,YAAY,GAAG,EAAE;EACrBF,QAAQ,CAACG,KAAK,CAAC,2BAA2B,CAAC;EAC3C,IAAIC,WAAW,GAAG,YAAY;EAC9BC,MAAM,CAAC,EAAE,EAACD,WAAW,CAAC;EACtBJ,QAAQ,CAACM,KAAK,CAAC,CAAC;IAAEC,GAAG;IAAEC;EAAS,CAAC,KAAK;IAClC,MAAMC,IAAI,GAAGF,GAAG;IAChB,IAAIC,QAAQ,CAACE,OAAO,KAAK,EAAE,EAAE;MAAG;MAC5Bb,OAAO,GAAGK,YAAY;MACtBF,QAAQ,CAACW,OAAO,CAAC,EAAE,CAAC;MACpB;MACA;MACA;;MAEA;MACAZ,OAAO,CAACa,WAAW,CAACf,OAAO,CAAC;MAC5BQ,MAAM,CAAC,EAAE,EAACD,WAAW,CAAC;MACtBL,OAAO,CAACc,UAAU,CAAEf,IAAI,IAAK;QACzBE,QAAQ,CAACG,KAAK,CAACL,IAAI,CAAC;QACpBA,IAAI,GAAE,EAAE;MACZ,CAAC,CAAC;MACF;MACA;MACAI,YAAY,GAAG,EAAE;IAGrB,CAAC,MAAM,IAAIM,QAAQ,CAACE,OAAO,KAAK,CAAC,EAAE;MAC/B;MACA,IAAIR,YAAY,CAACY,MAAM,GAAG,CAAC,EAAE;QACzBd,QAAQ,CAACG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACzBD,YAAY,GAAGA,YAAY,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5C;IACJ,CAAC,MAAM;MACHb,YAAY,IAAIO,IAAI;MACpBT,QAAQ,CAACG,KAAK,CAACM,IAAI,CAAC;IACxB;EACJ,CAAC,CAAC;EACF,SAASJ,MAAMA,CAACW,EAAE,EAAEC,QAAQ,EAAE;IAC1B,IAAIA,QAAQ,IAAI,OAAO,EAAE;MACrBA,QAAQ,GAAG,GAAG;IAClB;IACAjB,QAAQ,CAACG,KAAK,CAAE,GAAEa,EAAG,aAAYC,QAAS,IAAG,CAAC;EAClD;AACJ;AAACC,EAAA,GAjEQxB,KAAK;AAmEd,SAASA,KAAK;AAAG,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
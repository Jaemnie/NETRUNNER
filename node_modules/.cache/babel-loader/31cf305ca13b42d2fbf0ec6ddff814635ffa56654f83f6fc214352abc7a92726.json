{"ast":null,"code":"import io from 'socket.io-client';\nclass SocketResult {\n  constructor() {\n    // Token은 인스턴스가 생성될 때 한 번만 설정되어야 합니다.\n    const token = localStorage.getItem('accessToken');\n    // this.socket을 사용해 클래스 내 다른 메소드에서도 소켓에 접근할 수 있습니다.\n    this.socket = io('172.16.230.134:4000/term', {\n      query: {\n        token\n      }\n    }); // NestJS 서버 주소\n\n    // 메시지 리스너를 여기서 한번만 등록합니다.\n    this.socket.on('message', payload => {\n      if (this.onMessageReceived) {\n        this.onMessageReceived(payload);\n      }\n    });\n  }\n  joinRoom(id) {\n    this.roomId = id;\n    this.socket.on('join', {\n      roomId: `${id}roomId`\n    });\n  }\n  getRoomId() {\n    return this.roomId;\n  }\n  // 메시지를 받는 메소드\n  getMessage(callback) {\n    console.log(\"callback:\", callback);\n    this.onMessageReceived = callback;\n    console.log(\"callback2:\", this.onMessageReceived);\n  }\n\n  // 메시지를 보내는 메소드\n  sendMessage(message) {\n    this.socket.emit('message', {\n      roomId: `${this.roomId}roomId`,\n      payload: `${message}`\n    });\n    console.log(\"chat:\", message);\n  }\n  leaveRoom() {\n    this.socket.emit('leave', {\n      roomId: `${this.roomId}`\n    });\n  }\n}\nexport { SocketResult };","map":{"version":3,"names":["io","SocketResult","constructor","token","localStorage","getItem","socket","query","on","payload","onMessageReceived","joinRoom","id","roomId","getRoomId","getMessage","callback","console","log","sendMessage","message","emit","leaveRoom"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/socket.jsx"],"sourcesContent":["import io from 'socket.io-client';\n\nclass SocketResult {\n    roomId;\n    constructor() {\n        // Token은 인스턴스가 생성될 때 한 번만 설정되어야 합니다.\n        const token = localStorage.getItem('accessToken');\n        // this.socket을 사용해 클래스 내 다른 메소드에서도 소켓에 접근할 수 있습니다.\n        this.socket = io('172.16.230.134:4000/term', {\n            query: { token }\n        }); // NestJS 서버 주소\n\n        // 메시지 리스너를 여기서 한번만 등록합니다.\n        this.socket.on('message', (payload) => {\n            if(this.onMessageReceived) {\n                this.onMessageReceived(payload);\n            }\n        });\n    }\n    joinRoom(id){\n        this.roomId = id;\n        this.socket.on('join',{roomId:`${id}roomId`});\n    }\n    getRoomId(){\n        return this.roomId;\n    }\n    // 메시지를 받는 메소드\n    getMessage(callback) {\n        console.log(\"callback:\",callback);\n        this.onMessageReceived = callback;\n        console.log(\"callback2:\",this.onMessageReceived);\n    }\n\n    // 메시지를 보내는 메소드\n    sendMessage(message) {\n        this.socket.emit('message', {roomId:`${this.roomId}roomId`,payload:`${message}`});\n        console.log(\"chat:\",message);\n    }\n\n    leaveRoom(){\n        this.socket.emit('leave',{roomId:`${this.roomId}`});\n    }\n}\n\nexport { SocketResult };\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,YAAY,CAAC;EAEfC,WAAWA,CAAA,EAAG;IACV;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD;IACA,IAAI,CAACC,MAAM,GAAGN,EAAE,CAAC,0BAA0B,EAAE;MACzCO,KAAK,EAAE;QAAEJ;MAAM;IACnB,CAAC,CAAC,CAAC,CAAC;;IAEJ;IACA,IAAI,CAACG,MAAM,CAACE,EAAE,CAAC,SAAS,EAAGC,OAAO,IAAK;MACnC,IAAG,IAAI,CAACC,iBAAiB,EAAE;QACvB,IAAI,CAACA,iBAAiB,CAACD,OAAO,CAAC;MACnC;IACJ,CAAC,CAAC;EACN;EACAE,QAAQA,CAACC,EAAE,EAAC;IACR,IAAI,CAACC,MAAM,GAAGD,EAAE;IAChB,IAAI,CAACN,MAAM,CAACE,EAAE,CAAC,MAAM,EAAC;MAACK,MAAM,EAAE,GAAED,EAAG;IAAO,CAAC,CAAC;EACjD;EACAE,SAASA,CAAA,EAAE;IACP,OAAO,IAAI,CAACD,MAAM;EACtB;EACA;EACAE,UAAUA,CAACC,QAAQ,EAAE;IACjBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACF,QAAQ,CAAC;IACjC,IAAI,CAACN,iBAAiB,GAAGM,QAAQ;IACjCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAC,IAAI,CAACR,iBAAiB,CAAC;EACpD;;EAEA;EACAS,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACd,MAAM,CAACe,IAAI,CAAC,SAAS,EAAE;MAACR,MAAM,EAAE,GAAE,IAAI,CAACA,MAAO,QAAO;MAACJ,OAAO,EAAE,GAAEW,OAAQ;IAAC,CAAC,CAAC;IACjFH,OAAO,CAACC,GAAG,CAAC,OAAO,EAACE,OAAO,CAAC;EAChC;EAEAE,SAASA,CAAA,EAAE;IACP,IAAI,CAAChB,MAAM,CAACe,IAAI,CAAC,OAAO,EAAC;MAACR,MAAM,EAAE,GAAE,IAAI,CAACA,MAAO;IAAC,CAAC,CAAC;EACvD;AACJ;AAEA,SAASZ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/fileSystem.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolder, faFile, faFolderOpen } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DirectoryTree = ({\n  directory\n}) => {\n  _s();\n  const [openDirectories, setOpenDirectories] = useState([]);\n  const toggleDirectory = name => {\n    const isOpen = openDirectories.includes(name);\n    if (isOpen) {\n      setOpenDirectories(openDirectories.filter(dirName => dirName !== name));\n    } else {\n      setOpenDirectories([...openDirectories, name]);\n    }\n  };\n  const renderTree = node => {\n    if (!node) return null;\n    let icon;\n    if (node.type === 'file') {\n      icon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }, this);\n    } else if (node.type === 'directory') {\n      const isOpen = openDirectories.includes(node.name);\n      icon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: isOpen ? faFolderOpen : faFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => node.type === 'directory' && toggleDirectory(node.name),\n      children: [icon, \" \", node.name, node.type === 'directory' && openDirectories.includes(node.name) && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: node.children.map(renderTree)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, node.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: renderTree(directory)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_s(DirectoryTree, \"y9m87BQXbsawST2a2hFW7Of+S3k=\");\n_c = DirectoryTree;\nexport default DirectoryTree;\nvar _c;\n$RefreshReg$(_c, \"DirectoryTree\");","map":{"version":3,"names":["React","useState","FontAwesomeIcon","faFolder","faFile","faFolderOpen","jsxDEV","_jsxDEV","DirectoryTree","directory","_s","openDirectories","setOpenDirectories","toggleDirectory","name","isOpen","includes","filter","dirName","renderTree","node","icon","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","children","map","_c","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/fileSystem.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolder, faFile, faFolderOpen } from '@fortawesome/free-solid-svg-icons';\n\nconst DirectoryTree = ({ directory }) => {\n  const [openDirectories, setOpenDirectories] = useState([]);\n\n  const toggleDirectory = (name) => {\n    const isOpen = openDirectories.includes(name);\n    if (isOpen) {\n      setOpenDirectories(openDirectories.filter(dirName => dirName !== name));\n    } else {\n      setOpenDirectories([...openDirectories, name]);\n    }\n  };\n\n  const renderTree = (node) => {\n    if (!node) return null;\n\n    let icon;\n    if (node.type === 'file') {\n      icon = <FontAwesomeIcon icon={faFile} />;\n    } else if (node.type === 'directory') {\n      const isOpen = openDirectories.includes(node.name);\n      icon = <FontAwesomeIcon icon={isOpen ? faFolderOpen : faFolder} />;\n    }\n\n    return (\n      <li key={node.name} onClick={() => node.type === 'directory' && toggleDirectory(node.name)}>\n        {icon} {node.name}\n        {node.type === 'directory' && openDirectories.includes(node.name) && (\n          <ul>{node.children.map(renderTree)}</ul>\n        )}\n      </li>\n    );\n  };\n\n  return <ul>{renderTree(directory)}</ul>;\n};\n\nexport default DirectoryTree;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,QAAQ,EAAEC,MAAM,EAAEC,YAAY,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnF,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMY,eAAe,GAAIC,IAAI,IAAK;IAChC,MAAMC,MAAM,GAAGJ,eAAe,CAACK,QAAQ,CAACF,IAAI,CAAC;IAC7C,IAAIC,MAAM,EAAE;MACVH,kBAAkB,CAACD,eAAe,CAACM,MAAM,CAACC,OAAO,IAAIA,OAAO,KAAKJ,IAAI,CAAC,CAAC;IACzE,CAAC,MAAM;MACLF,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAEG,IAAI,CAAC,CAAC;IAChD;EACF,CAAC;EAED,MAAMK,UAAU,GAAIC,IAAI,IAAK;IAC3B,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;IAEtB,IAAIC,IAAI;IACR,IAAID,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;MACxBD,IAAI,gBAAGd,OAAA,CAACL,eAAe;QAACmB,IAAI,EAAEjB;MAAO;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC1C,CAAC,MAAM,IAAIN,IAAI,CAACE,IAAI,KAAK,WAAW,EAAE;MACpC,MAAMP,MAAM,GAAGJ,eAAe,CAACK,QAAQ,CAACI,IAAI,CAACN,IAAI,CAAC;MAClDO,IAAI,gBAAGd,OAAA,CAACL,eAAe;QAACmB,IAAI,EAAEN,MAAM,GAAGV,YAAY,GAAGF;MAAS;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpE;IAEA,oBACEnB,OAAA;MAAoBoB,OAAO,EAAEA,CAAA,KAAMP,IAAI,CAACE,IAAI,KAAK,WAAW,IAAIT,eAAe,CAACO,IAAI,CAACN,IAAI,CAAE;MAAAc,QAAA,GACxFP,IAAI,EAAC,GAAC,EAACD,IAAI,CAACN,IAAI,EAChBM,IAAI,CAACE,IAAI,KAAK,WAAW,IAAIX,eAAe,CAACK,QAAQ,CAACI,IAAI,CAACN,IAAI,CAAC,iBAC/DP,OAAA;QAAAqB,QAAA,EAAKR,IAAI,CAACQ,QAAQ,CAACC,GAAG,CAACV,UAAU;MAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACxC;IAAA,GAJMN,IAAI,CAACN,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKd,CAAC;EAET,CAAC;EAED,oBAAOnB,OAAA;IAAAqB,QAAA,EAAKT,UAAU,CAACV,SAAS;EAAC;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACzC,CAAC;AAAChB,EAAA,CAlCIF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAoCnB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
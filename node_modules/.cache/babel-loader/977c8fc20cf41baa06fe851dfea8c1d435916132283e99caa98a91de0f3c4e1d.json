{"ast":null,"code":"class AuthService {\n  login(userId, password) {\n    console.log(userId + password);\n    fetch('http://localhost:4000/auth/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data) {\n        // JWT를 로컬 저장소에 저장\n        localStorage.setItem('jwt', data);\n        console.log(localStorage.getItem('jwt'));\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n      }\n    }).catch(error => console.error('로그인 에러:', error));\n  }\n  fetchUserData() {\n    const jwt = localStorage.getItem('jwt');\n    fetch('https://yourapi.com/user/data', {\n      headers: {\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    }).catch(error => console.error('데이터 요청 에러:', error));\n  }\n  logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('jwt');\n    window.location.href = '/';\n    // 로그아웃 처리를 위해 서버에 요청을 보냄\n    fetch('http://localhost:4000/auth/', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(() => {\n      console.log('로그아웃 되었습니다.');\n    }).catch(error => console.error('로그아웃 에러:', error));\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["AuthService","login","userId","password","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","data","localStorage","setItem","getItem","error","catch","fetchUserData","jwt","logout","removeItem","window","location","href"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["class AuthService {\n    login(userId, password) {\n      console.log(userId + password);\n        fetch('http://localhost:4000/auth/signin', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ userId, password }),\n        })\n        .then(response => response.json())\n        .then(data => {\n          if (data) {\n            // JWT를 로컬 저장소에 저장\n            localStorage.setItem('jwt', data);\n            console.log(localStorage.getItem('jwt'));\n          } else {\n            console.error('JWT를 받아오지 못했습니다.');\n          }\n        })\n        .catch(error => console.error('로그인 에러:', error));\n      }\n\n      fetchUserData() {\n        const jwt = localStorage.getItem('jwt');\n        \n        fetch('https://yourapi.com/user/data', {\n          headers: {\n            'Authorization': `Bearer ${jwt}`,\n          },\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data);\n        })\n        .catch(error => console.error('데이터 요청 에러:', error));\n      }\n\n      logout() {\n        // 로컬 저장소에서 JWT 삭제\n        localStorage.removeItem('jwt');\n        window.location.href = '/';\n        // 로그아웃 처리를 위해 서버에 요청을 보냄\n        fetch('http://localhost:4000/auth/', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n          },\n        })\n        .then(() => {\n          console.log('로그아웃 되었습니다.');\n        })\n        .catch(error => console.error('로그아웃 에러:', error));\n      }\n      \n}\n\nexport default AuthService;\n"],"mappings":"AAAA,MAAMA,WAAW,CAAC;EACdC,KAAKA,CAACC,MAAM,EAAEC,QAAQ,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACH,MAAM,GAAGC,QAAQ,CAAC;IAC5BG,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAAEC;MAAS,CAAC;IAC3C,CAAC,CAAC,CACDS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ,IAAIA,IAAI,EAAE;QACR;QACAC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,IAAI,CAAC;QACjCX,OAAO,CAACC,GAAG,CAACW,YAAY,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC;MAC1C,CAAC,MAAM;QACLd,OAAO,CAACe,KAAK,CAAC,kBAAkB,CAAC;MACnC;IACF,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAIf,OAAO,CAACe,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC,CAAC;EAClD;EAEAE,aAAaA,CAAA,EAAG;IACd,MAAMC,GAAG,GAAGN,YAAY,CAACE,OAAO,CAAC,KAAK,CAAC;IAEvCZ,KAAK,CAAC,+BAA+B,EAAE;MACrCE,OAAO,EAAE;QACP,eAAe,EAAG,UAASc,GAAI;MACjC;IACF,CAAC,CAAC,CACDV,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZX,OAAO,CAACC,GAAG,CAACU,IAAI,CAAC;IACnB,CAAC,CAAC,CACDK,KAAK,CAACD,KAAK,IAAIf,OAAO,CAACe,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC,CAAC;EACrD;EAEAI,MAAMA,CAAA,EAAG;IACP;IACAP,YAAY,CAACQ,UAAU,CAAC,KAAK,CAAC;IAC9BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC1B;IACArB,KAAK,CAAC,6BAA6B,EAAE;MACnCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAG,UAASQ,YAAY,CAACE,OAAO,CAAC,KAAK,CAAE;MACzD;IACF,CAAC,CAAC,CACDN,IAAI,CAAC,MAAM;MACVR,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC5B,CAAC,CAAC,CACDe,KAAK,CAACD,KAAK,IAAIf,OAAO,CAACe,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC,CAAC;EACnD;AAEN;AAEA,eAAenB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
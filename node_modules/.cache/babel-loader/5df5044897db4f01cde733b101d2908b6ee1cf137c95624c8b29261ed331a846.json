{"ast":null,"code":"import TerminalInteraction from './TerminalInteraction';\nimport { SocketResult } from './socket';\nfunction Termi(terminal2, elements, socketRoomId) {\n  let message = '';\n  const socket = new SocketResult();\n  socket.joinRoom(socketRoomId);\n  const terminal = terminal2;\n  terminal.open(elements);\n  let currentInput = '';\n  let commandHistory = [];\n  let historyIndex = -1;\n  terminal.write('넷러너에 오신걸 환영합니다!\\r\\n');\n  terminal.onKey(({\n    key,\n    domEvent\n  }) => {\n    const char = key;\n    if (domEvent.keyCode === 13) {\n      // Enter key\n      message = currentInput;\n      terminal.writeln('');\n      commandHistory.push(currentInput);\n      historyIndex = commandHistory.length;\n      socket.sendMessage(message);\n      TerminalInteraction.handleTerminalInput(message);\n      socket.getMessage(chat => {\n        terminal.write(chat);\n        terminal.writeln('');\n        chat = '';\n      });\n      currentInput = '';\n    } else if (domEvent.keyCode === 8) {\n      // Backspace\n      if (currentInput.length > 0) {\n        terminal.write('\\b \\b'); // Remove character from terminal\n        currentInput = currentInput.slice(0, -1);\n      }\n    } else if (domEvent.keyCode === 38) {\n      // Up arrow key\n      if (historyIndex > 0) {\n        historyIndex--;\n        currentInput = commandHistory[historyIndex];\n        terminal.write('\\r\\x1b[K' + currentInput); // Clear the line and write the previous command\n      }\n    } else if (domEvent.keyCode === 40) {\n      // Down arrow key\n      if (historyIndex < commandHistory.length - 1) {\n        historyIndex++;\n        currentInput = commandHistory[historyIndex];\n        terminal.write('\\r\\x1b[K' + currentInput); // Clear the line and write the next command\n      } else {\n        historyIndex = commandHistory.length;\n        currentInput = '';\n        terminal.write('\\r\\x1b[K'); // Clear the line\n      }\n    } else if (domEvent.ctrlKey && domEvent.keyCode === 76) {\n      // Ctrl+L to clear the terminal\n      terminal.clear();\n    } else {\n      currentInput += char;\n      terminal.write(char);\n    }\n  });\n}\n_c = Termi;\nexport { Termi };\nvar _c;\n$RefreshReg$(_c, \"Termi\");","map":{"version":3,"names":["TerminalInteraction","SocketResult","Termi","terminal2","elements","socketRoomId","message","socket","joinRoom","terminal","open","currentInput","commandHistory","historyIndex","write","onKey","key","domEvent","char","keyCode","writeln","push","length","sendMessage","handleTerminalInput","getMessage","chat","slice","ctrlKey","clear","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/NETRUNNER/src/components/termsocket.jsx"],"sourcesContent":["import TerminalInteraction from './TerminalInteraction';\r\nimport { SocketResult } from './socket';\r\n\r\nfunction Termi(terminal2, elements, socketRoomId) {\r\n    let message = '';\r\n    const socket = new SocketResult();\r\n    socket.joinRoom(socketRoomId);\r\n    const terminal = terminal2;\r\n    terminal.open(elements);\r\n    let currentInput = '';\r\n    let commandHistory = [];\r\n    let historyIndex = -1;\r\n\r\n    terminal.write('넷러너에 오신걸 환영합니다!\\r\\n');\r\n    terminal.onKey(({ key, domEvent }) => {\r\n        const char = key;\r\n        if (domEvent.keyCode === 13) {  // Enter key\r\n            message = currentInput;\r\n            terminal.writeln('');\r\n            commandHistory.push(currentInput);\r\n            historyIndex = commandHistory.length;\r\n            socket.sendMessage(message);\r\n            TerminalInteraction.handleTerminalInput(message);\r\n            socket.getMessage((chat) => {\r\n                terminal.write(chat);\r\n                terminal.writeln('');\r\n                chat = '';\r\n            });\r\n            currentInput = '';\r\n        } else if (domEvent.keyCode === 8) {  // Backspace\r\n            if (currentInput.length > 0) {\r\n                terminal.write('\\b \\b'); // Remove character from terminal\r\n                currentInput = currentInput.slice(0, -1);\r\n            }\r\n        } else if (domEvent.keyCode === 38) {  // Up arrow key\r\n            if (historyIndex > 0) {\r\n                historyIndex--;\r\n                currentInput = commandHistory[historyIndex];\r\n                terminal.write('\\r\\x1b[K' + currentInput); // Clear the line and write the previous command\r\n            }\r\n        } else if (domEvent.keyCode === 40) {  // Down arrow key\r\n            if (historyIndex < commandHistory.length - 1) {\r\n                historyIndex++;\r\n                currentInput = commandHistory[historyIndex];\r\n                terminal.write('\\r\\x1b[K' + currentInput); // Clear the line and write the next command\r\n            } else {\r\n                historyIndex = commandHistory.length;\r\n                currentInput = '';\r\n                terminal.write('\\r\\x1b[K'); // Clear the line\r\n            }\r\n        } else if (domEvent.ctrlKey && domEvent.keyCode === 76) {  // Ctrl+L to clear the terminal\r\n            terminal.clear();\r\n        } else {\r\n            currentInput += char;\r\n            terminal.write(char);\r\n        }\r\n    });\r\n}\r\n\r\nexport { Termi };\r\n"],"mappings":"AAAA,OAAOA,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,YAAY,QAAQ,UAAU;AAEvC,SAASC,KAAKA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,YAAY,EAAE;EAC9C,IAAIC,OAAO,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAG,IAAIN,YAAY,CAAC,CAAC;EACjCM,MAAM,CAACC,QAAQ,CAACH,YAAY,CAAC;EAC7B,MAAMI,QAAQ,GAAGN,SAAS;EAC1BM,QAAQ,CAACC,IAAI,CAACN,QAAQ,CAAC;EACvB,IAAIO,YAAY,GAAG,EAAE;EACrB,IAAIC,cAAc,GAAG,EAAE;EACvB,IAAIC,YAAY,GAAG,CAAC,CAAC;EAErBJ,QAAQ,CAACK,KAAK,CAAC,qBAAqB,CAAC;EACrCL,QAAQ,CAACM,KAAK,CAAC,CAAC;IAAEC,GAAG;IAAEC;EAAS,CAAC,KAAK;IAClC,MAAMC,IAAI,GAAGF,GAAG;IAChB,IAAIC,QAAQ,CAACE,OAAO,KAAK,EAAE,EAAE;MAAG;MAC5Bb,OAAO,GAAGK,YAAY;MACtBF,QAAQ,CAACW,OAAO,CAAC,EAAE,CAAC;MACpBR,cAAc,CAACS,IAAI,CAACV,YAAY,CAAC;MACjCE,YAAY,GAAGD,cAAc,CAACU,MAAM;MACpCf,MAAM,CAACgB,WAAW,CAACjB,OAAO,CAAC;MAC3BN,mBAAmB,CAACwB,mBAAmB,CAAClB,OAAO,CAAC;MAChDC,MAAM,CAACkB,UAAU,CAAEC,IAAI,IAAK;QACxBjB,QAAQ,CAACK,KAAK,CAACY,IAAI,CAAC;QACpBjB,QAAQ,CAACW,OAAO,CAAC,EAAE,CAAC;QACpBM,IAAI,GAAG,EAAE;MACb,CAAC,CAAC;MACFf,YAAY,GAAG,EAAE;IACrB,CAAC,MAAM,IAAIM,QAAQ,CAACE,OAAO,KAAK,CAAC,EAAE;MAAG;MAClC,IAAIR,YAAY,CAACW,MAAM,GAAG,CAAC,EAAE;QACzBb,QAAQ,CAACK,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACzBH,YAAY,GAAGA,YAAY,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5C;IACJ,CAAC,MAAM,IAAIV,QAAQ,CAACE,OAAO,KAAK,EAAE,EAAE;MAAG;MACnC,IAAIN,YAAY,GAAG,CAAC,EAAE;QAClBA,YAAY,EAAE;QACdF,YAAY,GAAGC,cAAc,CAACC,YAAY,CAAC;QAC3CJ,QAAQ,CAACK,KAAK,CAAC,UAAU,GAAGH,YAAY,CAAC,CAAC,CAAC;MAC/C;IACJ,CAAC,MAAM,IAAIM,QAAQ,CAACE,OAAO,KAAK,EAAE,EAAE;MAAG;MACnC,IAAIN,YAAY,GAAGD,cAAc,CAACU,MAAM,GAAG,CAAC,EAAE;QAC1CT,YAAY,EAAE;QACdF,YAAY,GAAGC,cAAc,CAACC,YAAY,CAAC;QAC3CJ,QAAQ,CAACK,KAAK,CAAC,UAAU,GAAGH,YAAY,CAAC,CAAC,CAAC;MAC/C,CAAC,MAAM;QACHE,YAAY,GAAGD,cAAc,CAACU,MAAM;QACpCX,YAAY,GAAG,EAAE;QACjBF,QAAQ,CAACK,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;MAChC;IACJ,CAAC,MAAM,IAAIG,QAAQ,CAACW,OAAO,IAAIX,QAAQ,CAACE,OAAO,KAAK,EAAE,EAAE;MAAG;MACvDV,QAAQ,CAACoB,KAAK,CAAC,CAAC;IACpB,CAAC,MAAM;MACHlB,YAAY,IAAIO,IAAI;MACpBT,QAAQ,CAACK,KAAK,CAACI,IAAI,CAAC;IACxB;EACJ,CAAC,CAAC;AACN;AAACY,EAAA,GAtDQ5B,KAAK;AAwDd,SAASA,KAAK;AAAG,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
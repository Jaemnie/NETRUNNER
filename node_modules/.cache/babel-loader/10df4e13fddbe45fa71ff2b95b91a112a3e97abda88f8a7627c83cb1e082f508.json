{"ast":null,"code":"import { SocketResult } from \"./socket\";\nlet terminal = null;\nlet directoryViewer = null;\nconst sockets = new SocketResult();\nexport const TerminalInteraction = {\n  //터미널 객체 설정\n  setTerminal: term => {\n    terminal = term;\n  },\n  //gui페이지 설정\n  setDirectoryViewer: viewer => {\n    directoryViewer = viewer;\n  },\n  //터미널->GUI\n  handleTerminalInput: data => {\n    // 터미널 창에서 입력된 명령어를 DirectoryViewer에 전달\n    // const co = data.split(' ');\n    // if(co[0]==='cd'){\n    // sockets.sendMessage(data);\n    // sockets.getMessage((data) => {\n    directoryViewer.updateDirectoryContent(data);\n    //   });\n    // }\n  },\n  //GUI->터미널\n  appendToTerminal: text => {\n    // DirectoryViewer에서 전달받은 텍스트를 터미널 창에 입력\n    terminal.write(text);\n    terminal.write('\\r\\n');\n    // sockets.sendMessage(text);\n    // sockets.getMessage((text) => {\n    //   const temp1 = text;\n    //   const temp2 = text;\n    //   const regex = /\\[(.*?)\\]/g;\n    //   const files = temp1.replace(regex, '$1').split(' ');\n    //   const regex2 = /\\[(directory|file)\\]/g;\n    //   const result =  temp2.match(regex2);\n    //   const regex3 = /\\[(.*?)\\]/g;\n    //   const filestype = result.map(item => item.replace(regex3, '$1'));\n    //   const setDir = {files,filestype};\n    //   directoryViewer.setContents(setDir);\n    // });\n  }\n};","map":{"version":3,"names":["SocketResult","terminal","directoryViewer","sockets","TerminalInteraction","setTerminal","term","setDirectoryViewer","viewer","handleTerminalInput","data","updateDirectoryContent","appendToTerminal","text","write"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/TerminalInteraction.jsx"],"sourcesContent":["import {SocketResult} from \"./socket\";\n\nlet terminal = null;\nlet directoryViewer = null;\nconst sockets = new SocketResult();\nexport const TerminalInteraction = {\n  //터미널 객체 설정\n  setTerminal: (term) => {\n    terminal = term;\n  },\n\n  //gui페이지 설정\n  setDirectoryViewer: (viewer) => {\n    directoryViewer = viewer;\n  },\n\n  //터미널->GUI\n  handleTerminalInput: (data) => {\n    // 터미널 창에서 입력된 명령어를 DirectoryViewer에 전달\n    // const co = data.split(' ');\n    // if(co[0]==='cd'){\n    // sockets.sendMessage(data);\n    // sockets.getMessage((data) => {\n      directoryViewer.updateDirectoryContent(data);\n  //   });\n  // }\n  },\n\n  //GUI->터미널\n  appendToTerminal: (text) => {\n    // DirectoryViewer에서 전달받은 텍스트를 터미널 창에 입력\n    terminal.write(text);\n    terminal.write('\\r\\n');\n    // sockets.sendMessage(text);\n    // sockets.getMessage((text) => {\n    //   const temp1 = text;\n    //   const temp2 = text;\n    //   const regex = /\\[(.*?)\\]/g;\n    //   const files = temp1.replace(regex, '$1').split(' ');\n    //   const regex2 = /\\[(directory|file)\\]/g;\n    //   const result =  temp2.match(regex2);\n    //   const regex3 = /\\[(.*?)\\]/g;\n    //   const filestype = result.map(item => item.replace(regex3, '$1'));\n    //   const setDir = {files,filestype};\n    //   directoryViewer.setContents(setDir);\n    // });\n  }\n};\n"],"mappings":"AAAA,SAAQA,YAAY,QAAO,UAAU;AAErC,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAIC,eAAe,GAAG,IAAI;AAC1B,MAAMC,OAAO,GAAG,IAAIH,YAAY,CAAC,CAAC;AAClC,OAAO,MAAMI,mBAAmB,GAAG;EACjC;EACAC,WAAW,EAAGC,IAAI,IAAK;IACrBL,QAAQ,GAAGK,IAAI;EACjB,CAAC;EAED;EACAC,kBAAkB,EAAGC,MAAM,IAAK;IAC9BN,eAAe,GAAGM,MAAM;EAC1B,CAAC;EAED;EACAC,mBAAmB,EAAGC,IAAI,IAAK;IAC7B;IACA;IACA;IACA;IACA;IACER,eAAe,CAACS,sBAAsB,CAACD,IAAI,CAAC;IAChD;IACA;EACA,CAAC;EAED;EACAE,gBAAgB,EAAGC,IAAI,IAAK;IAC1B;IACAZ,QAAQ,CAACa,KAAK,CAACD,IAAI,CAAC;IACpBZ,QAAQ,CAACa,KAAK,CAAC,MAAM,CAAC;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
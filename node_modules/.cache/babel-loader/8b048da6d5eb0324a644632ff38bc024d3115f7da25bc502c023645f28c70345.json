{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx\",\n  _s = $RefreshSig$();\nimport { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Termi } from \"../pages/mainPages/temp/terminal\";\nimport DirectoryTree from \"./fileSystem\";\nimport { FileSystem } from \"../pages/mainPages/temp/fileSystems\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TermPage = () => {\n  _s();\n  const terminalRef = useRef(null); // DOM 요소 참조를 위한 ref\n  useEffect(() => {\n    if (terminalRef.current) {\n      const term = new Terminal();\n      Termi(term, terminalRef.current);\n      return () => {\n        term.dispose(); // Terminal 인스턴스 정리\n      };\n    }\n  }, []);\n  const filesysRef = useRef(null);\n  const [fileSystemObject, setFileSystemObject] = useState(null); // 파일 시스템 구조를 상태로 관리\n  useEffect(() => {\n    const fs = new FileSystem();\n    // 여기에서 FileSystem 인스턴스를 사용하여 파일 시스템 구조를 초기화합니다.\n    fs.createDirectory(\"/root\");\n    fs.createDirectory(\"/tmp\");\n    fs.createDirectory(\"/home/user\");\n    fs.createFile(\"/home/user/file1.txt\");\n    fs.createFile(\"/home/user/file2.txt\");\n    fs.createDirectory(\"/home/user/documents\");\n    fs.createFile(\"/home/user/documents/document1.txt\");\n\n    // FileSystem에서 구조를 가져와서 상태에 설정\n    // 여기서는 FileSystem 구현이 객체 형태의 파일 시스템 구조를 반환한다고 가정합니다.\n    const structure = fs.printFileSystem(); // 이 메소드가 객체 형태의 파일 시스템 구조를 반환한다고 가정\n    setFileSystemObject(structure);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [fileSystemObject && /*#__PURE__*/_jsxDEV(DirectoryTree, {\n      directory: fileSystemObject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: terminalRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(TermPage, \"uKe2dApqRWqoE2ssglKarZwSeSc=\");\n_c = TermPage;\nexport default TermPage;\nvar _c;\n$RefreshReg$(_c, \"TermPage\");","map":{"version":3,"names":["Terminal","React","useRef","useEffect","useState","Termi","DirectoryTree","FileSystem","jsxDEV","_jsxDEV","Fragment","_Fragment","TermPage","_s","terminalRef","current","term","dispose","filesysRef","fileSystemObject","setFileSystemObject","fs","createDirectory","createFile","structure","printFileSystem","children","directory","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","width","height","_c","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx"],"sourcesContent":["import { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React,{useRef,useEffect,useState} from \"react\";\nimport { Termi } from \"../pages/mainPages/temp/terminal\";\nimport DirectoryTree from \"./fileSystem\";\nimport { FileSystem } from \"../pages/mainPages/temp/fileSystems\";\n\nconst TermPage=()=> {\n    const terminalRef = useRef(null); // DOM 요소 참조를 위한 ref\n    useEffect(() => {\n      if(terminalRef.current) {\n        const term = new Terminal();\n        Termi(term,terminalRef.current);\n        return () => {\n            term.dispose(); // Terminal 인스턴스 정리\n          };\n      }\n    }, []);\n    const filesysRef = useRef(null);\n    const [fileSystemObject, setFileSystemObject] = useState(null); // 파일 시스템 구조를 상태로 관리\n    useEffect(()=>{\n      const fs = new FileSystem();\n      // 여기에서 FileSystem 인스턴스를 사용하여 파일 시스템 구조를 초기화합니다.\n      fs.createDirectory(\"/root\");\n      fs.createDirectory(\"/tmp\");\n      fs.createDirectory(\"/home/user\");\n      fs.createFile(\"/home/user/file1.txt\");\n      fs.createFile(\"/home/user/file2.txt\");\n      fs.createDirectory(\"/home/user/documents\");\n      fs.createFile(\"/home/user/documents/document1.txt\");\n      \n      // FileSystem에서 구조를 가져와서 상태에 설정\n      // 여기서는 FileSystem 구현이 객체 형태의 파일 시스템 구조를 반환한다고 가정합니다.\n      const structure = fs.printFileSystem(); // 이 메소드가 객체 형태의 파일 시스템 구조를 반환한다고 가정\n      setFileSystemObject(structure);\n  \n    },[]);\n    return (<>\n                {fileSystemObject && <DirectoryTree directory={fileSystemObject} />}\n                <div ref={terminalRef} style={{width: \"100%\",height: \"100%\"}}></div>\n</>\n    );\n}\nexport default TermPage;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,cAAc;AACvC,OAAO,+CAA+C;AACtD,OAAOC,KAAK,IAAEC,MAAM,EAACC,SAAS,EAACC,QAAQ,QAAO,OAAO;AACrD,SAASC,KAAK,QAAQ,kCAAkC;AACxD,OAAOC,aAAa,MAAM,cAAc;AACxC,SAASC,UAAU,QAAQ,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjE,MAAMC,QAAQ,GAACA,CAAA,KAAK;EAAAC,EAAA;EAChB,MAAMC,WAAW,GAAGZ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAClCC,SAAS,CAAC,MAAM;IACd,IAAGW,WAAW,CAACC,OAAO,EAAE;MACtB,MAAMC,IAAI,GAAG,IAAIhB,QAAQ,CAAC,CAAC;MAC3BK,KAAK,CAACW,IAAI,EAACF,WAAW,CAACC,OAAO,CAAC;MAC/B,OAAO,MAAM;QACTC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC;IACL;EACF,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,UAAU,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChED,SAAS,CAAC,MAAI;IACZ,MAAMkB,EAAE,GAAG,IAAId,UAAU,CAAC,CAAC;IAC3B;IACAc,EAAE,CAACC,eAAe,CAAC,OAAO,CAAC;IAC3BD,EAAE,CAACC,eAAe,CAAC,MAAM,CAAC;IAC1BD,EAAE,CAACC,eAAe,CAAC,YAAY,CAAC;IAChCD,EAAE,CAACE,UAAU,CAAC,sBAAsB,CAAC;IACrCF,EAAE,CAACE,UAAU,CAAC,sBAAsB,CAAC;IACrCF,EAAE,CAACC,eAAe,CAAC,sBAAsB,CAAC;IAC1CD,EAAE,CAACE,UAAU,CAAC,oCAAoC,CAAC;;IAEnD;IACA;IACA,MAAMC,SAAS,GAAGH,EAAE,CAACI,eAAe,CAAC,CAAC,CAAC,CAAC;IACxCL,mBAAmB,CAACI,SAAS,CAAC;EAEhC,CAAC,EAAC,EAAE,CAAC;EACL,oBAAQf,OAAA,CAAAE,SAAA;IAAAe,QAAA,GACKP,gBAAgB,iBAAIV,OAAA,CAACH,aAAa;MAACqB,SAAS,EAAER;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnEtB,OAAA;MAAKuB,GAAG,EAAElB,WAAY;MAACmB,KAAK,EAAE;QAACC,KAAK,EAAE,MAAM;QAACC,MAAM,EAAE;MAAM;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eAClF,CAAC;AAEH,CAAC;AAAAlB,EAAA,CAnCKD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
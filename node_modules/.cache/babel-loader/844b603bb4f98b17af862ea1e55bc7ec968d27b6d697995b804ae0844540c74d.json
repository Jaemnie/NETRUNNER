{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nconst token = localStorage.getItem('jwt');\nconst socket = io('http://localhost:3000', {\n  query: {\n    token\n  }\n}); // NestJS 서버 주소\n\nfunction commands() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  useEffect(() => {\n    socket.on('message', payload => {\n      setChat([...chat, payload]);\n    });\n  }, [chat]);\n  const sendMessage = () => {\n    socket.emit('message', message);\n    setMessage('');\n  };\n}\n_s(commands, \"fi/IGQg4eRn1At1LK6QvoIC5kKc=\");\nfunction Termi(terminal2, elements) {\n  const terminal = terminal2;\n  terminal.open(elements);\n  let currentInput = '';\n  terminal.write('Welcome to NetRunner!\\r\\n');\n  let currentPath = '/home/user';\n  prompt('', currentPath);\n  terminal.onKey(({\n    key,\n    domEvent\n  }) => {\n    const char = key;\n    if (domEvent.keyCode === 13) {\n      // Enter key\n      terminal.writeln('');\n      commands.setMessage(currentInput);\n      commands.sendMessage();\n      terminal.write(commands.chat.map(payload));\n      currentInput = '';\n      prompt('', currentPath);\n    } else if (domEvent.keyCode === 8) {\n      // Backspace 처리\n      if (currentInput.length > 0) {\n        terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n        currentInput = currentInput.slice(0, -1);\n      }\n    } else {\n      currentInput += char;\n      terminal.write(char);\n    }\n  });\n  function prompt(ip, location) {\n    if (location == \"/root\") {\n      location = '~';\n    }\n    terminal.write(`${ip}root@root[${location}]$`);\n  }\n}\n_c = Termi;\nexport { Termi };\nvar _c;\n$RefreshReg$(_c, \"Termi\");","map":{"version":3,"names":["React","useState","useEffect","io","token","localStorage","getItem","socket","query","commands","_s","message","setMessage","chat","setChat","on","payload","sendMessage","emit","Termi","terminal2","elements","terminal","open","currentInput","write","currentPath","prompt","onKey","key","domEvent","char","keyCode","writeln","map","length","slice","ip","location","_c","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termsocket.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst token = localStorage.getItem('jwt');\nconst socket = io('http://localhost:3000',{\n    query: { token }\n  }); // NestJS 서버 주소\n\nfunction commands() {\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n\n  useEffect(() => {\n    socket.on('message', (payload) => {\n      setChat([...chat, payload]);\n    });\n  }, [chat]);\n\n  const sendMessage = () => {\n    socket.emit('message', message);\n    setMessage('');\n  };\n}\nfunction Termi(terminal2,elements) {\n    const terminal = terminal2;\n    terminal.open(elements);\n    let currentInput = '';\n    terminal.write('Welcome to NetRunner!\\r\\n');\n    let currentPath = '/home/user';\n    prompt('',currentPath);\n    terminal.onKey(({ key, domEvent }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {  // Enter key\n            terminal.writeln('');\n            commands.setMessage(currentInput);\n            commands.sendMessage();\n            terminal.write(commands.chat.map((payload)));\n            currentInput = '';\n            prompt('',currentPath);\n        } else if (domEvent.keyCode === 8) {\n            // Backspace 처리\n            if (currentInput.length > 0) {\n                terminal.write('\\b \\b'); // 터미널에서 문자를 제거\n                currentInput = currentInput.slice(0, -1);\n            }\n        } else {\n            currentInput += char;\n            terminal.write(char);\n        }\n    });\n    function prompt(ip, location) {\n        if (location == \"/root\") {\n            location = '~';\n        }\n        terminal.write(`${ip}root@root[${location}]$`);\n    }\n}\n\nexport { Termi };\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;AACzC,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,EAAC;EACtCK,KAAK,EAAE;IAAEJ;EAAM;AACjB,CAAC,CAAC,CAAC,CAAC;;AAEN,SAASK,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdK,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAGC,OAAO,IAAK;MAChCF,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAEG,OAAO,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEV,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBV,MAAM,CAACW,IAAI,CAAC,SAAS,EAAEP,OAAO,CAAC;IAC/BC,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;AACH;AAACF,EAAA,CAdQD,QAAQ;AAejB,SAASU,KAAKA,CAACC,SAAS,EAACC,QAAQ,EAAE;EAC/B,MAAMC,QAAQ,GAAGF,SAAS;EAC1BE,QAAQ,CAACC,IAAI,CAACF,QAAQ,CAAC;EACvB,IAAIG,YAAY,GAAG,EAAE;EACrBF,QAAQ,CAACG,KAAK,CAAC,2BAA2B,CAAC;EAC3C,IAAIC,WAAW,GAAG,YAAY;EAC9BC,MAAM,CAAC,EAAE,EAACD,WAAW,CAAC;EACtBJ,QAAQ,CAACM,KAAK,CAAC,CAAC;IAAEC,GAAG;IAAEC;EAAS,CAAC,KAAK;IAClC,MAAMC,IAAI,GAAGF,GAAG;IAChB,IAAIC,QAAQ,CAACE,OAAO,KAAK,EAAE,EAAE;MAAG;MAC5BV,QAAQ,CAACW,OAAO,CAAC,EAAE,CAAC;MACpBxB,QAAQ,CAACG,UAAU,CAACY,YAAY,CAAC;MACjCf,QAAQ,CAACQ,WAAW,CAAC,CAAC;MACtBK,QAAQ,CAACG,KAAK,CAAChB,QAAQ,CAACI,IAAI,CAACqB,GAAG,CAAElB,OAAQ,CAAC,CAAC;MAC5CQ,YAAY,GAAG,EAAE;MACjBG,MAAM,CAAC,EAAE,EAACD,WAAW,CAAC;IAC1B,CAAC,MAAM,IAAII,QAAQ,CAACE,OAAO,KAAK,CAAC,EAAE;MAC/B;MACA,IAAIR,YAAY,CAACW,MAAM,GAAG,CAAC,EAAE;QACzBb,QAAQ,CAACG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACzBD,YAAY,GAAGA,YAAY,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5C;IACJ,CAAC,MAAM;MACHZ,YAAY,IAAIO,IAAI;MACpBT,QAAQ,CAACG,KAAK,CAACM,IAAI,CAAC;IACxB;EACJ,CAAC,CAAC;EACF,SAASJ,MAAMA,CAACU,EAAE,EAAEC,QAAQ,EAAE;IAC1B,IAAIA,QAAQ,IAAI,OAAO,EAAE;MACrBA,QAAQ,GAAG,GAAG;IAClB;IACAhB,QAAQ,CAACG,KAAK,CAAE,GAAEY,EAAG,aAAYC,QAAS,IAAG,CAAC;EAClD;AACJ;AAACC,EAAA,GAjCQpB,KAAK;AAmCd,SAASA,KAAK;AAAG,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
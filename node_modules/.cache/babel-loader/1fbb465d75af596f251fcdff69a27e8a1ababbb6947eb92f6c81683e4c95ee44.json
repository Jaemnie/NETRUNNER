{"ast":null,"code":"class AuthService{constructor(){this.baseUrl=process.env.REACT_APP_API_URL||'http://localhost:4000';}async signup(userId,username,password,email){try{const response=await fetch(\"\".concat(this.baseUrl,\"/auth/signup\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId,username,password,email})});if(!response.ok){throw new Error(\"\\uD68C\\uC6D0\\uAC00\\uC785 \\uC2E4\\uD328: \".concat(response.statusText));}console.log('회원가입이 완료되었습니다.');}catch(error){console.error('회원가입 에러:',error);}}async login(userId,password){try{const response=await fetch(\"\".concat(this.baseUrl,\"/auth/signin\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId,password})});if(!response.ok){throw new Error(\"\\uB85C\\uADF8\\uC778 \\uC2E4\\uD328: \".concat(response.statusText));}const data=await response.json();if(data.accessToken){localStorage.setItem('accessToken',data.accessToken);return true;// 로그인 성공\n}else{console.error('JWT를 받아오지 못했습니다.');return false;// 로그인 실패\n}}catch(error){console.error('로그인 에러:',error);return false;// 로그인 실패\n}}async logout(){// 로컬 저장소에서 JWT 삭제\nlocalStorage.removeItem('accessToken');window.location.href='/';try{const response=await fetch(\"\".concat(this.baseUrl,\"/auth/signout\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(localStorage.getItem('accessToken'))}});if(!response.ok){throw new Error(\"\\uB85C\\uADF8\\uC544\\uC6C3 \\uC2E4\\uD328: \".concat(response.statusText));}console.log('로그아웃 되었습니다.');}catch(error){console.error('로그아웃 에러:',error);}}async changepass(email,password){try{const response=await fetch(\"\".concat(this.baseUrl,\"/auth/changepass\"),{method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(!response.ok){throw new Error(\"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD \\uC2E4\\uD328: \".concat(response.statusText));}console.log('비밀번호가 변경되었습니다.');}catch(error){console.error('비밀번호 변경 에러:',error);}}}export default AuthService;","map":{"version":3,"names":["AuthService","constructor","baseUrl","process","env","REACT_APP_API_URL","signup","userId","username","password","email","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","statusText","console","log","error","login","data","json","accessToken","localStorage","setItem","logout","removeItem","window","location","href","getItem","changepass"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["class AuthService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:4000';\n  }\n\n  async signup(userId, username, password, email) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signup`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, username, password, email }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`회원가입 실패: ${response.statusText}`);\n      }\n\n      console.log('회원가입이 완료되었습니다.');\n    } catch (error) {\n      console.error('회원가입 에러:', error);\n    }\n  }\n\n  async login(userId, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signin`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`로그인 실패: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n        return true; // 로그인 성공\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n        return false; // 로그인 실패\n      }\n    } catch (error) {\n      console.error('로그인 에러:', error);\n      return false; // 로그인 실패\n    }\n  }\n\n  async logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    window.location.href = '/';\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signout`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`로그아웃 실패: ${response.statusText}`);\n      }\n\n      console.log('로그아웃 되었습니다.');\n    } catch (error) {\n      console.error('로그아웃 에러:', error);\n    }\n  }\n\n  async changepass(email, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/changepass`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`비밀번호 변경 실패: ${response.statusText}`);\n      }\n\n      console.log('비밀번호가 변경되었습니다.');\n    } catch (error) {\n      console.error('비밀번호 변경 에러:', error);\n    }\n  }\n}\n\nexport default AuthService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
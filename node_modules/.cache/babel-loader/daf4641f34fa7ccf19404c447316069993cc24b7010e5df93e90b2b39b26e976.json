{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jae min\\\\Documents\\\\GitHub\\\\NETRUNNER\\\\src\\\\components\\\\fileSystem.jsx\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useState, useEffect } from 'react';\nimport { TerminalInteraction } from './TerminalInteraction';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolder, faFile } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getIconForType(type) {\n  switch (type) {\n    case 'directory':\n      return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFolder,\n        size: \"4x\",\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 14\n      }, this);\n    case 'file':\n      return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFile,\n        size: \"4x\",\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 14\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFile,\n        size: \"4x\",\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, this);\n  }\n}\nconst DirectoryViewer = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref, initialPath) => {\n  _s();\n  const [directoryContent, setDirectoryContent] = useState([]);\n  const [path, setPath] = useState(initialPath);\n  const [contents, setContents] = useState(null);\n  useImperativeHandle(ref, () => ({\n    // DirectoryViewer에서 터미널 창에 텍스트를 입력하는 함수\n    appendToTerminal: text => {\n      TerminalInteraction.appendToTerminal(text);\n    },\n    // DirectoryViewer에서 파일 시스템 내용을 변경하는 함수\n    updateDirectoryContent: newContent => {\n      console.log(\"terminput:\", newContent);\n      if (newContent === 'cd directory1') {\n        exampleData = {\n          files: ['file2.txt', 'file2.txt', 'directory2'],\n          filestype: ['file', 'file', 'directory']\n        };\n        setContents(exampleData);\n      }\n    }\n  }));\n  let exampleData = {\n    files: ['file1.txt', 'file2.txt', 'directory1', 'file1.txt', 'file2.txt', 'directory1', 'file1.txt', 'file2.txt', 'directory1', 'file1.txt', 'file2.txt', 'directory1'],\n    filestype: ['file', 'file', 'directory', 'file', 'file', 'directory', 'file', 'file', 'directory', 'file', 'file', 'directory']\n  };\n  useEffect(() => {\n    setContents(exampleData);\n    // // 백엔드에서 제공받은 데이터를 가공하여 화면에 표시\n    // const fetchDirectoryData = async () => {\n    //   const data = await fetch('/api/directory');\n    //   setDirectoryContent(data);\n    // };\n    // fetchDirectoryData();\n  }, []);\n  function handleItemClick(item, type) {\n    if (type === 'directory') {\n      const newPath = path === '/' ? `/${item}` : `${path}/${item}`;\n      setPath(newPath);\n      ref.current.appendToTerminal(`cd ${item}`);\n      exampleData = {\n        files: ['file2.txt', 'file2.txt', 'directory2'],\n        filestype: ['file', 'file', 'directory']\n      };\n      setContents(exampleData);\n      console.log(path);\n    } else {\n      ref.current.appendToTerminal(`cat ${item}`);\n      console.log(item + ' file clicked');\n    }\n  }\n  if (!contents) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  const gridStyle = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\n    gap: '10px',\n    textAlign: 'center',\n    flexGrow: '1',\n    color: 'white' // 폰트 컬러 화이트로 변경\n  };\n  const itemStyle = {\n    cursor: 'pointer',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    color: 'white' // 폰트 컬러 화이트로 변경\n  };\n  const pathBar = {\n    position: 'absolute',\n    /* 절대적 위치 설정 */\n    bottom: 100,\n    /* 바닥에서 0px의 위치 */\n    textAlign: 'left',\n    /* 텍스트 중앙 정렬 */\n    backgroundColor: '#c5e3df9d',\n    /* 배경색 설정 */\n    color: 'white' // 폰트 컬러 화이트로 변경\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '80vh',\n      color: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: pathBar,\n      children: path\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        borderRight: 'black solid 1px',\n        height: '100%'\n      },\n      children: \"sidebar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: gridStyle,\n      children: contents.files.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: itemStyle,\n        onClick: () => handleItemClick(item, contents.filestype[index]),\n        children: [getIconForType(contents.filestype[index]), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}, \"IPuocCLJyodKtYTwy4Zh8lo4xFg=\")), \"IPuocCLJyodKtYTwy4Zh8lo4xFg=\");\n_c2 = DirectoryViewer;\nexport { DirectoryViewer };\nvar _c, _c2;\n$RefreshReg$(_c, \"DirectoryViewer$forwardRef\");\n$RefreshReg$(_c2, \"DirectoryViewer\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useState","useEffect","TerminalInteraction","FontAwesomeIcon","faFolder","faFile","jsxDEV","_jsxDEV","getIconForType","type","icon","size","color","fileName","_jsxFileName","lineNumber","columnNumber","DirectoryViewer","_s","_c","props","ref","initialPath","directoryContent","setDirectoryContent","path","setPath","contents","setContents","appendToTerminal","text","updateDirectoryContent","newContent","console","log","exampleData","files","filestype","handleItemClick","item","newPath","current","children","gridStyle","display","gridTemplateColumns","gap","textAlign","flexGrow","itemStyle","cursor","flexDirection","alignItems","pathBar","position","bottom","backgroundColor","style","height","borderRight","map","index","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/jae min/Documents/GitHub/NETRUNNER/src/components/fileSystem.jsx"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useState, useEffect } from 'react';\r\nimport { TerminalInteraction } from './TerminalInteraction';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFolder, faFile } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction getIconForType(type) {\r\n  switch (type) {\r\n    case 'directory':\r\n      return <FontAwesomeIcon icon={faFolder} size=\"4x\" color='white'/>;\r\n    case 'file':\r\n      return <FontAwesomeIcon icon={faFile} size=\"4x\" color='white' />;\r\n    default:\r\n      return <FontAwesomeIcon icon={faFile} size=\"4x\" color='white' />;\r\n  }\r\n}\r\n\r\nconst DirectoryViewer = forwardRef((props, ref ,initialPath ) => {\r\n  const [directoryContent, setDirectoryContent] = useState([]);\r\n  const [path, setPath] = useState(initialPath);\r\n  const [contents, setContents] = useState(null);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    // DirectoryViewer에서 터미널 창에 텍스트를 입력하는 함수\r\n    appendToTerminal: (text) => {\r\n      TerminalInteraction.appendToTerminal(text);\r\n    },\r\n\r\n    // DirectoryViewer에서 파일 시스템 내용을 변경하는 함수\r\n    updateDirectoryContent: (newContent) => {\r\n      console.log(\"terminput:\",newContent);\r\n      if(newContent==='cd directory1'){\r\n        exampleData={\r\n          files: ['file2.txt', 'file2.txt', 'directory2'],\r\n          filestype: ['file', 'file', 'directory']\r\n        }\r\n        setContents(exampleData);\r\n      }\r\n    }\r\n  }));\r\n\r\n  let exampleData = {\r\n    files: ['file1.txt', 'file2.txt', 'directory1','file1.txt', 'file2.txt', 'directory1','file1.txt', 'file2.txt', 'directory1','file1.txt', 'file2.txt', 'directory1'],\r\n    filestype: ['file', 'file', 'directory','file', 'file', 'directory','file', 'file', 'directory','file', 'file', 'directory']\r\n  };\r\n\r\n  useEffect(() => {\r\n    setContents(exampleData);\r\n    // // 백엔드에서 제공받은 데이터를 가공하여 화면에 표시\r\n    // const fetchDirectoryData = async () => {\r\n    //   const data = await fetch('/api/directory');\r\n    //   setDirectoryContent(data);\r\n    // };\r\n    // fetchDirectoryData();\r\n  }, []);\r\n\r\n  function handleItemClick(item, type) {\r\n    if (type === 'directory') {\r\n      const newPath = path === '/' ? `/${item}` : `${path}/${item}`;\r\n      setPath(newPath);\r\n      ref.current.appendToTerminal(`cd ${item}`);\r\n      exampleData={\r\n        files: ['file2.txt', 'file2.txt', 'directory2'],\r\n        filestype: ['file', 'file', 'directory']\r\n      }\r\n      setContents(exampleData);\r\n      console.log(path);\r\n    } else {\r\n      ref.current.appendToTerminal(`cat ${item}`);\r\n      console.log(item + ' file clicked');\r\n    }\r\n  }\r\n  \r\n\r\n  if (!contents) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const gridStyle = {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\r\n    gap: '10px',\r\n    textAlign: 'center',\r\n    flexGrow: '1',\r\n    color: 'white',  // 폰트 컬러 화이트로 변경\r\n  };\r\n\r\n  const itemStyle = {\r\n    cursor: 'pointer',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    color: 'white',  // 폰트 컬러 화이트로 변경\r\n  };\r\n\r\n  const pathBar = {\r\n    position: 'absolute', /* 절대적 위치 설정 */\r\n    bottom: 100, /* 바닥에서 0px의 위치 */\r\n    textAlign: 'left', /* 텍스트 중앙 정렬 */\r\n    backgroundColor: '#c5e3df9d', /* 배경색 설정 */\r\n    color: 'white'  // 폰트 컬러 화이트로 변경\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', display: 'flex', flexDirection: 'column', height: '80vh', color: 'white' }}>\r\n      <p style={pathBar}>{path}</p>\r\n      <div style={{ borderRight: 'black solid 1px', height: '100%' }}>\r\n        sidebar\r\n      </div>\r\n      <div style={gridStyle}>\r\n        {contents.files.map((item, index) => (\r\n          <div key={index} style={itemStyle} onClick={() => handleItemClick(item, contents.filestype[index])}>\r\n            {getIconForType(contents.filestype[index])}\r\n            <div>{item}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport { DirectoryViewer };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
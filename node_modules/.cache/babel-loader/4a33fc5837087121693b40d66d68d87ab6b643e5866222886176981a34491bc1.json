{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/fileSystem.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolder, faFile } from '@fortawesome/free-solid-svg-icons';\n\n// 파일 타입에 따라 아이콘을 반환하는 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getIconForType(type) {\n  switch (type) {\n    case 'directory':\n      return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 14\n      }, this);\n    case 'file':\n      return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 14\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 14\n      }, this);\n  }\n}\n\n// 디렉토리 뷰어 컴포넌트\nconst DirectoryViewer = ({\n  initialPath\n}) => {\n  _s();\n  const [path, setPath] = useState(initialPath);\n  const [contents, setContents] = useState(null);\n\n  // 경로 변경 시, 해당 경로의 내용을 가져오는 로직 (현재는 예시 데이터 사용)\n  useEffect(() => {\n    // 백엔드 연동 로직은 여기에 구현\n    // 예시 데이터\n    const exampleData = {\n      files: ['file1.txt', 'file2.txt', 'directory1'],\n      filestype: ['file', 'file', 'directory']\n    };\n    setContents(exampleData);\n  }, [path]);\n\n  // 항목 클릭 핸들러\n  function handleItemClick(item, type) {\n    if (type === 'directory') {\n      setPath(path + '/' + item); // 경로 변경\n    } else {\n      // 파일 클릭 시 처리\n      console.log(item + ' file clicked');\n    }\n  }\n  if (!contents) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: contents.files.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleItemClick(item, contents.filestype[index]),\n      children: [getIconForType(contents.filestype[index]), \" \", item]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(DirectoryViewer, \"ssR5dTsbFJOVu6xJEJcuIH7bbNM=\");\n_c = DirectoryViewer;\nexport default DirectoryViewer;\nvar _c;\n$RefreshReg$(_c, \"DirectoryViewer\");","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faFolder","faFile","jsxDEV","_jsxDEV","getIconForType","type","icon","fileName","_jsxFileName","lineNumber","columnNumber","DirectoryViewer","initialPath","_s","path","setPath","contents","setContents","exampleData","files","filestype","handleItemClick","item","console","log","children","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/fileSystem.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolder, faFile } from '@fortawesome/free-solid-svg-icons';\n\n// 파일 타입에 따라 아이콘을 반환하는 함수\nfunction getIconForType(type) {\n  switch (type) {\n    case 'directory':\n      return <FontAwesomeIcon icon={faFolder} />;\n    case 'file':\n      return <FontAwesomeIcon icon={faFile} />;\n    default:\n      return <FontAwesomeIcon icon={faFile} />;\n  }\n}\n\n// 디렉토리 뷰어 컴포넌트\nconst DirectoryViewer = ({ initialPath }) => {\n  const [path, setPath] = useState(initialPath);\n  const [contents, setContents] = useState(null);\n\n  // 경로 변경 시, 해당 경로의 내용을 가져오는 로직 (현재는 예시 데이터 사용)\n  useEffect(() => {\n    // 백엔드 연동 로직은 여기에 구현\n    // 예시 데이터\n    const exampleData = {\n      files: ['file1.txt', 'file2.txt', 'directory1'],\n      filestype: ['file', 'file', 'directory']\n    };\n    setContents(exampleData);\n  }, [path]);\n\n  // 항목 클릭 핸들러\n  function handleItemClick(item, type) {\n    if (type === 'directory') {\n      setPath(path + '/' + item); // 경로 변경\n    } else {\n      // 파일 클릭 시 처리\n      console.log(item + ' file clicked');\n    }\n  }\n\n  if (!contents) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ul>\n      {contents.files.map((item, index) => (\n        <li key={index} onClick={() => handleItemClick(item, contents.filestype[index])}>\n          {getIconForType(contents.filestype[index])} {item}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default DirectoryViewer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,QAAQ,EAAEC,MAAM,QAAQ,mCAAmC;;AAEpE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,cAAcA,CAACC,IAAI,EAAE;EAC5B,QAAQA,IAAI;IACV,KAAK,WAAW;MACd,oBAAOF,OAAA,CAACJ,eAAe;QAACO,IAAI,EAAEN;MAAS;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC5C,KAAK,MAAM;MACT,oBAAOP,OAAA,CAACJ,eAAe;QAACO,IAAI,EAAEL;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC1C;MACE,oBAAOP,OAAA,CAACJ,eAAe;QAACO,IAAI,EAAEL;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;EAC5C;AACF;;AAEA;AACA,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAACe,WAAW,CAAC;EAC7C,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMoB,WAAW,GAAG;MAClBC,KAAK,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;MAC/CC,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW;IACzC,CAAC;IACDH,WAAW,CAACC,WAAW,CAAC;EAC1B,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;;EAEV;EACA,SAASO,eAAeA,CAACC,IAAI,EAAEjB,IAAI,EAAE;IACnC,IAAIA,IAAI,KAAK,WAAW,EAAE;MACxBU,OAAO,CAACD,IAAI,GAAG,GAAG,GAAGQ,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL;MACAC,OAAO,CAACC,GAAG,CAACF,IAAI,GAAG,eAAe,CAAC;IACrC;EACF;EAEA,IAAI,CAACN,QAAQ,EAAE;IACb,oBAAOb,OAAA;MAAAsB,QAAA,EAAK;IAAU;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEP,OAAA;IAAAsB,QAAA,EACGT,QAAQ,CAACG,KAAK,CAACO,GAAG,CAAC,CAACJ,IAAI,EAAEK,KAAK,kBAC9BxB,OAAA;MAAgByB,OAAO,EAAEA,CAAA,KAAMP,eAAe,CAACC,IAAI,EAAEN,QAAQ,CAACI,SAAS,CAACO,KAAK,CAAC,CAAE;MAAAF,QAAA,GAC7ErB,cAAc,CAACY,QAAQ,CAACI,SAAS,CAACO,KAAK,CAAC,CAAC,EAAC,GAAC,EAACL,IAAI;IAAA,GAD1CK,KAAK;MAAApB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAET,CAAC;AAACG,EAAA,CAtCIF,eAAe;AAAAkB,EAAA,GAAflB,eAAe;AAwCrB,eAAeA,eAAe;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
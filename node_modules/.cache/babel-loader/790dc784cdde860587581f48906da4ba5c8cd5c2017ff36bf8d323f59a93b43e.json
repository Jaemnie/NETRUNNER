{"ast":null,"code":"var _jsxFileName = \"/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx\",\n  _s = $RefreshSig$();\nimport { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { SocketResult } from \"./socket\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TermPage = ({/*text, onTerminalInput*/}) => {\n  _s();\n  const terminalRef = useRef();\n  const [terminal, setTerminal] = useState();\n  useEffect(() => {\n    if (!terminal && terminalRef.current) {\n      const newTerminal = new Terminal();\n      // newTerminal.onData((data) => {\n      //   onTerminalInput(data);\n      // });\n      newTerminal.open(terminalRef.current);\n      setTerminal(newTerminal);\n      const sockets = new SocketResult();\n      let currentInput = \"\";\n      let currentPath = \"/home/user\";\n      newTerminal.write(\"Welcome to NetRunner!\\r\\n\");\n      prompt(newTerminal, currentPath);\n      newTerminal.onKey(({\n        key,\n        domEvent\n      }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {\n          // Enter key\n          const message = currentInput;\n          newTerminal.writeln(\"\");\n          sockets.sendMessage(message, currentPath);\n          prompt(newTerminal, currentPath);\n          sockets.getMessage(chat => {\n            newTerminal.write(chat);\n            newTerminal.writeln(\"\");\n            prompt(newTerminal, currentPath);\n          });\n          currentInput = \"\";\n        } else if (domEvent.keyCode === 8) {\n          // Backspace 처리\n          if (currentInput.length > 0) {\n            newTerminal.write(\"\\b \\b\"); // 터미널에서 문자를 제거\n            currentInput = currentInput.slice(0, -1);\n          }\n        } else {\n          currentInput += char;\n          newTerminal.write(char);\n        }\n      });\n      return () => {\n        newTerminal.dispose();\n      };\n    }\n\n    // if (terminal && text) {\n    //   terminal.write(text);\n    //   terminal.writeln(\"\");\n    // }\n  }, [/*text, onTerminalInput,*/terminal, terminalRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: terminalRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this)\n  }, void 0, false);\n};\n_s(TermPage, \"E6C/nYKX9KZWSnHo86JhXhlsauQ=\");\n_c = TermPage;\nfunction prompt(terminal, location) {\n  if (location === \"/root\") {\n    location = \"~\";\n  }\n  terminal.write(`root@root[${location}]$`);\n}\nexport default TermPage;\nvar _c;\n$RefreshReg$(_c, \"TermPage\");","map":{"version":3,"names":["Terminal","React","useRef","useEffect","useState","SocketResult","jsxDEV","_jsxDEV","Fragment","_Fragment","TermPage","_s","terminalRef","terminal","setTerminal","current","newTerminal","open","sockets","currentInput","currentPath","write","prompt","onKey","key","domEvent","char","keyCode","message","writeln","sendMessage","getMessage","chat","length","slice","dispose","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","location","$RefreshReg$"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/termPage.jsx"],"sourcesContent":["import { Terminal } from \"@xterm/xterm\";\nimport \"../../node_modules/@xterm/xterm/css/xterm.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { SocketResult } from \"./socket\";\n\nconst TermPage = ({ /*text, onTerminalInput*/ }) => {\n  const terminalRef = useRef();\n  const [terminal, setTerminal] = useState();\n\n  useEffect(() => {\n    if (!terminal && terminalRef.current) {\n      const newTerminal = new Terminal();\n      // newTerminal.onData((data) => {\n      //   onTerminalInput(data);\n      // });\n      newTerminal.open(terminalRef.current);\n      setTerminal(newTerminal);\n\n      const sockets = new SocketResult();\n      let currentInput = \"\";\n      let currentPath = \"/home/user\";\n\n      newTerminal.write(\"Welcome to NetRunner!\\r\\n\");\n      prompt(newTerminal, currentPath);\n\n      newTerminal.onKey(({ key, domEvent }) => {\n        const char = key;\n        if (domEvent.keyCode === 13) {\n          // Enter key\n          const message = currentInput;\n          newTerminal.writeln(\"\");\n          sockets.sendMessage(message, currentPath);\n          prompt(newTerminal, currentPath);\n          sockets.getMessage((chat) => {\n            newTerminal.write(chat);\n            newTerminal.writeln(\"\");\n            prompt(newTerminal, currentPath);\n          });\n          currentInput = \"\";\n        } else if (domEvent.keyCode === 8) {\n          // Backspace 처리\n          if (currentInput.length > 0) {\n            newTerminal.write(\"\\b \\b\"); // 터미널에서 문자를 제거\n            currentInput = currentInput.slice(0, -1);\n          }\n        } else {\n          currentInput += char;\n          newTerminal.write(char);\n        }\n      });\n\n      return () => {\n        newTerminal.dispose();\n      };\n    }\n\n    // if (terminal && text) {\n    //   terminal.write(text);\n    //   terminal.writeln(\"\");\n    // }\n  }, [/*text, onTerminalInput,*/ terminal, terminalRef]);\n\n  return <><div ref={terminalRef} style={{ width: \"100%\", height: \"100%\"}}/></>;\n};\n\nfunction prompt(terminal, location) {\n  if (location === \"/root\") {\n    location = \"~\";\n  }\n  terminal.write(`root@root[${location}]$`);\n}\n\nexport default TermPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
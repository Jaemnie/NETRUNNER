{"ast":null,"code":"import { SocketResult } from \"./socket\";\nlet terminal = null;\nlet directoryViewer = null;\nexport const TerminalInteraction = {\n  //터미널 객체 설정\n  setTerminal: term => {\n    terminal = term;\n  },\n  //gui페이지 설정\n  setDirectoryViewer: viewer => {\n    directoryViewer = viewer;\n  },\n  //터미널->GUI\n  handleTerminalInput: data => {\n    // 터미널 창에서 입력된 명령어를 DirectoryViewer에 전달\n    directoryViewer.updateDirectoryContent(data);\n  },\n  //GUI->터미널\n  appendToTerminal: text => {\n    // DirectoryViewer에서 전달받은 텍스트를 터미널 창에 입력\n    terminal.write(text);\n    terminal.write('\\r\\n');\n    const temp = text.replace(' ');\n    if (temp[0] === 'cd') {\n      socketss.sendMessage(\"pwd\");\n      socketss.getMessage(chat => {\n        socketss.sendMessage(`cd ${chat}`);\n      });\n      socketss.sendMessage(\"ls -al\");\n      socketss.getMessage(chat => {\n        const temp1 = chat;\n        const temp2 = chat;\n        const regex1 = /[^[\\]]+(?=\\[)/g;\n        const regex2 = /(?<=\\[).*?(?=\\])/g;\n        const files = temp1.match(regex1);\n        const filestype = temp2.match(regex2);\n        const setDir = {\n          files,\n          filestype\n        };\n        setContents(setDir);\n      });\n    }\n  }\n};","map":{"version":3,"names":["SocketResult","terminal","directoryViewer","TerminalInteraction","setTerminal","term","setDirectoryViewer","viewer","handleTerminalInput","data","updateDirectoryContent","appendToTerminal","text","write","temp","replace","socketss","sendMessage","getMessage","chat","temp1","temp2","regex1","regex2","files","match","filestype","setDir","setContents"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/components/TerminalInteraction.jsx"],"sourcesContent":["\nimport {SocketResult} from \"./socket\";\n\nlet terminal = null;\nlet directoryViewer = null;\n\nexport const TerminalInteraction = {\n  //터미널 객체 설정\n  setTerminal: (term) => {\n    terminal = term;\n  },\n\n  //gui페이지 설정\n  setDirectoryViewer: (viewer) => {\n    directoryViewer = viewer;\n  },\n\n  //터미널->GUI\n  handleTerminalInput: (data) => {\n    // 터미널 창에서 입력된 명령어를 DirectoryViewer에 전달\n      directoryViewer.updateDirectoryContent(data);\n  },\n\n  //GUI->터미널\n  appendToTerminal: (text) => {\n    // DirectoryViewer에서 전달받은 텍스트를 터미널 창에 입력\n    terminal.write(text);\n    terminal.write('\\r\\n');\n    const temp = text.replace(' ');\n      if(temp[0] === 'cd'){\n      socketss.sendMessage(\"pwd\");\n      socketss.getMessage((chat) => {\n        socketss.sendMessage(`cd ${chat}`);\n      });\n      socketss.sendMessage(\"ls -al\");\n      socketss.getMessage((chat) => {\n        const temp1 = chat;\n        const temp2 = chat;\n        const regex1 = /[^[\\]]+(?=\\[)/g;\n        const regex2 = /(?<=\\[).*?(?=\\])/g;\n\n        const files = temp1.match(regex1); \n        const filestype = temp2.match(regex2);\n        const setDir = {files,filestype};\n        setContents(setDir);\n    });\n  }\n  }\n};\n"],"mappings":"AACA,SAAQA,YAAY,QAAO,UAAU;AAErC,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAIC,eAAe,GAAG,IAAI;AAE1B,OAAO,MAAMC,mBAAmB,GAAG;EACjC;EACAC,WAAW,EAAGC,IAAI,IAAK;IACrBJ,QAAQ,GAAGI,IAAI;EACjB,CAAC;EAED;EACAC,kBAAkB,EAAGC,MAAM,IAAK;IAC9BL,eAAe,GAAGK,MAAM;EAC1B,CAAC;EAED;EACAC,mBAAmB,EAAGC,IAAI,IAAK;IAC7B;IACEP,eAAe,CAACQ,sBAAsB,CAACD,IAAI,CAAC;EAChD,CAAC;EAED;EACAE,gBAAgB,EAAGC,IAAI,IAAK;IAC1B;IACAX,QAAQ,CAACY,KAAK,CAACD,IAAI,CAAC;IACpBX,QAAQ,CAACY,KAAK,CAAC,MAAM,CAAC;IACtB,MAAMC,IAAI,GAAGF,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAGD,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAC;MACpBE,QAAQ,CAACC,WAAW,CAAC,KAAK,CAAC;MAC3BD,QAAQ,CAACE,UAAU,CAAEC,IAAI,IAAK;QAC5BH,QAAQ,CAACC,WAAW,CAAE,MAAKE,IAAK,EAAC,CAAC;MACpC,CAAC,CAAC;MACFH,QAAQ,CAACC,WAAW,CAAC,QAAQ,CAAC;MAC9BD,QAAQ,CAACE,UAAU,CAAEC,IAAI,IAAK;QAC5B,MAAMC,KAAK,GAAGD,IAAI;QAClB,MAAME,KAAK,GAAGF,IAAI;QAClB,MAAMG,MAAM,GAAG,gBAAgB;QAC/B,MAAMC,MAAM,GAAG,mBAAmB;QAElC,MAAMC,KAAK,GAAGJ,KAAK,CAACK,KAAK,CAACH,MAAM,CAAC;QACjC,MAAMI,SAAS,GAAGL,KAAK,CAACI,KAAK,CAACF,MAAM,CAAC;QACrC,MAAMI,MAAM,GAAG;UAACH,KAAK;UAACE;QAAS,CAAC;QAChCE,WAAW,CAACD,MAAM,CAAC;MACvB,CAAC,CAAC;IACJ;EACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
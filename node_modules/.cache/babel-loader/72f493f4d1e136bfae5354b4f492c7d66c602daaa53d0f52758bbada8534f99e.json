{"ast":null,"code":"import { API } from '../config';\nclass AuthService {\n  async signup(userId, username, password, email) {\n    try {\n      const response = await fetch(`${API.SIGNUP}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          username,\n          password,\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`회원가입 실패: ${response.statusText}`);\n      }\n      console.log('회원가입이 완료되었습니다.');\n    } catch (error) {\n      console.error('회원가입 에러:', error);\n    }\n  }\n  async login(userId, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`로그인 실패: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n        localStorage.setItem('userId', userId); // userId 저장\n        return true; // 로그인 성공\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n        return false; // 로그인 실패\n      }\n    } catch (error) {\n      console.error('로그인 에러:', error);\n      return false; // 로그인 실패\n    }\n  }\n  async logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('userId'); // userId 삭제\n    window.location.href = '/';\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signout`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`로그아웃 실패: ${response.statusText}`);\n      }\n      console.log('로그아웃 되었습니다.');\n    } catch (error) {\n      console.error('로그아웃 에러:', error);\n    }\n  }\n  async changepass(email, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/changepass`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`비밀번호 변경 실패: ${response.statusText}`);\n      }\n      console.log('비밀번호가 변경되었습니다.');\n    } catch (error) {\n      console.error('비밀번호 변경 에러:', error);\n    }\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["API","AuthService","signup","userId","username","password","email","response","fetch","SIGNUP","method","headers","body","JSON","stringify","ok","Error","statusText","console","log","error","login","baseUrl","data","json","accessToken","localStorage","setItem","logout","removeItem","window","location","href","getItem","changepass"],"sources":["C:/Users/USER/Documents/GitHub/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["import { API } from '../config';\r\n\r\nclass AuthService {\r\n  async signup(userId, username, password, email) {\r\n    try {\r\n      const response = await fetch(`${API.SIGNUP}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, username, password, email }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`회원가입 실패: ${response.statusText}`);\r\n      }\r\n\r\n      console.log('회원가입이 완료되었습니다.');\r\n    } catch (error) {\r\n      console.error('회원가입 에러:', error);\r\n    }\r\n  }\r\n\r\n  async login(userId, password) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/auth/signin`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`로그인 실패: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.accessToken) {\r\n        localStorage.setItem('accessToken', data.accessToken);\r\n        localStorage.setItem('userId', userId); // userId 저장\r\n        return true; // 로그인 성공\r\n      } else {\r\n        console.error('JWT를 받아오지 못했습니다.');\r\n        return false; // 로그인 실패\r\n      }\r\n    } catch (error) {\r\n      console.error('로그인 에러:', error);\r\n      return false; // 로그인 실패\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    // 로컬 저장소에서 JWT 삭제\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('userId'); // userId 삭제\r\n    window.location.href = '/';\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/auth/signout`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`로그아웃 실패: ${response.statusText}`);\r\n      }\r\n\r\n      console.log('로그아웃 되었습니다.');\r\n    } catch (error) {\r\n      console.error('로그아웃 에러:', error);\r\n    }\r\n  }\r\n\r\n  async changepass(email, password) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/auth/changepass`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`비밀번호 변경 실패: ${response.statusText}`);\r\n      }\r\n\r\n      console.log('비밀번호가 변경되었습니다.');\r\n    } catch (error) {\r\n      console.error('비밀번호 변경 에러:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAE/B,MAAMC,WAAW,CAAC;EAChB,MAAMC,MAAMA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,GAAG,CAACS,MAAO,EAAC,EAAE;QAC5CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,MAAM;UAAEC,QAAQ;UAAEC,QAAQ;UAAEC;QAAM,CAAC;MAC5D,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,YAAWT,QAAQ,CAACU,UAAW,EAAC,CAAC;MACpD;MAEAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAClC;EACF;EAEA,MAAMC,KAAKA,CAAClB,MAAM,EAAEE,QAAQ,EAAE;IAC5B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACc,OAAQ,cAAa,EAAE;QAC1DZ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,MAAM;UAAEE;QAAS,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,WAAUT,QAAQ,CAACU,UAAW,EAAC,CAAC;MACnD;MAEA,MAAMM,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,WAAW,EAAE;QACpBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEJ,IAAI,CAACE,WAAW,CAAC;QACrDC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAExB,MAAM,CAAC,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,CAAC;MACf,CAAC,MAAM;QACLe,OAAO,CAACE,KAAK,CAAC,kBAAkB,CAAC;QACjC,OAAO,KAAK,CAAC,CAAC;MAChB;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO,KAAK,CAAC,CAAC;IAChB;EACF;EAEA,MAAMQ,MAAMA,CAAA,EAAG;IACb;IACAF,YAAY,CAACG,UAAU,CAAC,aAAa,CAAC;IACtCH,YAAY,CAACG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAE1B,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACc,OAAQ,eAAc,EAAE;QAC3DZ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAG,UAASe,YAAY,CAACO,OAAO,CAAC,aAAa,CAAE;QACjE;MACF,CAAC,CAAC;MAEF,IAAI,CAAC1B,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,YAAWT,QAAQ,CAACU,UAAW,EAAC,CAAC;MACpD;MAEAC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAClC;EACF;EAEA,MAAMc,UAAUA,CAAC5B,KAAK,EAAED,QAAQ,EAAE;IAChC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACc,OAAQ,kBAAiB,EAAE;QAC9DZ,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAED;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,eAAcT,QAAQ,CAACU,UAAW,EAAC,CAAC;MACvD;MAEAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACrC;EACF;AACF;AAEA,eAAenB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\NETRUNNER\\\\src\\\\components\\\\Background\\\\BackgroundMusic.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useAudio } from './AudioContext'; // AudioContext에서 상태와 함수를 가져옴\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundMusic = ({\n  src\n}) => {\n  _s();\n  const audioRef = useRef(null); // 오디오 엘리먼트를 참조하기 위한 useRef\n  const {\n    isMuted\n  } = useAudio(); // AudioContext에서 음소거 상태를 가져옴\n\n  // 컴포넌트가 마운트될 때 실행되는 useEffect\n  useEffect(() => {\n    const audio = audioRef.current;\n    audio.volume = 0; // 시작 볼륨을 0으로 설정\n    audio.play(); // 오디오 재생\n\n    // 오디오 볼륨을 점진적으로 증가시키는 함수\n    const fadeAudio = () => {\n      let volume = 0;\n      const interval = setInterval(() => {\n        if (volume < 0.1) {\n          volume += 0.01;\n          audio.volume = volume;\n        } else {\n          clearInterval(interval); // 볼륨이 0.1에 도달하면 인터벌을 멈춤\n        }\n      }, 100); // 100ms마다 볼륨을 0.01씩 증가\n    };\n    fadeAudio();\n  }, []);\n\n  // 음소거 상태가 변경될 때 실행되는 useEffect\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (isMuted) {\n      audio.volume = 0; // 음소거 상태일 때 볼륨을 0으로 설정\n    } else {\n      audio.volume = 0.1; // 음소거 해제 시 기본 볼륨을 0.1로 설정\n    }\n  }, [isMuted]);\n\n  // 오디오 엘리먼트를 반환, loop 속성으로 무한 재생\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    ref: audioRef,\n    src: src,\n    loop: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n_s(BackgroundMusic, \"FBgDyz5YZfBAbezYUA1MLaTLICc=\", false, function () {\n  return [useAudio];\n});\n_c = BackgroundMusic;\nexport default BackgroundMusic;\nvar _c;\n$RefreshReg$(_c, \"BackgroundMusic\");","map":{"version":3,"names":["React","useEffect","useRef","useAudio","jsxDEV","_jsxDEV","BackgroundMusic","src","_s","audioRef","isMuted","audio","current","volume","play","fadeAudio","interval","setInterval","clearInterval","ref","loop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/NETRUNNER/src/components/Background/BackgroundMusic.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useAudio } from './AudioContext'; // AudioContext에서 상태와 함수를 가져옴\r\n\r\nconst BackgroundMusic = ({ src }) => {\r\n  const audioRef = useRef(null); // 오디오 엘리먼트를 참조하기 위한 useRef\r\n  const { isMuted } = useAudio(); // AudioContext에서 음소거 상태를 가져옴\r\n\r\n  // 컴포넌트가 마운트될 때 실행되는 useEffect\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    audio.volume = 0; // 시작 볼륨을 0으로 설정\r\n    audio.play(); // 오디오 재생\r\n\r\n    // 오디오 볼륨을 점진적으로 증가시키는 함수\r\n    const fadeAudio = () => {\r\n      let volume = 0;\r\n      const interval = setInterval(() => {\r\n        if (volume < 0.1) {\r\n          volume += 0.01;\r\n          audio.volume = volume;\r\n        } else {\r\n          clearInterval(interval); // 볼륨이 0.1에 도달하면 인터벌을 멈춤\r\n        }\r\n      }, 100); // 100ms마다 볼륨을 0.01씩 증가\r\n    };\r\n\r\n    fadeAudio();\r\n  }, []);\r\n\r\n  // 음소거 상태가 변경될 때 실행되는 useEffect\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    if (isMuted) {\r\n      audio.volume = 0; // 음소거 상태일 때 볼륨을 0으로 설정\r\n    } else {\r\n      audio.volume = 0.1; // 음소거 해제 시 기본 볼륨을 0.1로 설정\r\n    }\r\n  }, [isMuted]);\r\n\r\n  // 오디오 엘리먼트를 반환, loop 속성으로 무한 재생\r\n  return <audio ref={audioRef} src={src} loop />;\r\n};\r\n\r\nexport default BackgroundMusic;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,QAAQ,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,MAAM;IAAEQ;EAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACAF,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGF,QAAQ,CAACG,OAAO;IAC9BD,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAClBF,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;;IAEd;IACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACtB,IAAIF,MAAM,GAAG,CAAC;MACd,MAAMG,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAIJ,MAAM,GAAG,GAAG,EAAE;UAChBA,MAAM,IAAI,IAAI;UACdF,KAAK,CAACE,MAAM,GAAGA,MAAM;QACvB,CAAC,MAAM;UACLK,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;QAC3B;MACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX,CAAC;IAEDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAd,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGF,QAAQ,CAACG,OAAO;IAC9B,IAAIF,OAAO,EAAE;MACXC,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IACpB,CAAC,MAAM;MACLF,KAAK,CAACE,MAAM,GAAG,GAAG,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;;EAEb;EACA,oBAAOL,OAAA;IAAOc,GAAG,EAAEV,QAAS;IAACF,GAAG,EAAEA,GAAI;IAACa,IAAI;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChD,CAAC;AAAChB,EAAA,CAtCIF,eAAe;EAAA,QAECH,QAAQ;AAAA;AAAAsB,EAAA,GAFxBnB,eAAe;AAwCrB,eAAeA,eAAe;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"class AuthService {\n  signup(userId, username, password, email) {\n    fetch('http://localhost:4000/auth/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        username,\n        password,\n        email\n      })\n    });\n  }\n  login(userId, password) {\n    console.log(userId + password);\n    fetch('http://localhost:4000/auth/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.accessToken) {\n        // JWT를 로컬 저장소에 저장\n        localStorage.setItem('accessToken', data.accessToken);\n      } else {\n        console.error('JWT를 받아오지 못했습니다.');\n      }\n    }).catch(error => console.error('로그인 에러:', error));\n  }\n\n  // fetchUserData() {\n  //   const jwt = localStorage.getItem('jwt');\n\n  //   fetch('https://yourapi.com/user/data', {\n  //     headers: {\n  //       'Authorization': `Bearer ${jwt}`,\n  //     },\n  //   })\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     console.log(data);\n  //   })\n  //   .catch(error => console.error('데이터 요청 에러:', error));\n  // }\n\n  logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    window.location.href = '/';\n    // 로그아웃 처리를 위해 서버에 요청을 보냄\n    fetch('http://localhost:4000/auth/signout', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    }).then(() => {\n      console.log('로그아웃 되었습니다.');\n    }).catch(error => console.error('로그아웃 에러:', error));\n  }\n  changepass(email, password) {\n    fetch('http://localhost:4000/auth/changepass', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(() => {\n      console.log('비밀번호가 변경되었습니다.');\n    }).catch(error => console.error(\"잘못된요청: \", error));\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["AuthService","signup","userId","username","password","email","fetch","method","headers","body","JSON","stringify","login","console","log","then","response","json","data","accessToken","localStorage","setItem","error","catch","logout","removeItem","window","location","href","getItem","changepass"],"sources":["/Users/jeon-aseob/Desktop/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["class AuthService {\n\n    signup(userId,username,password,email){\n      fetch('http://localhost:4000/auth/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId,username,password,email}),\n        });\n    }\n\n    login(userId, password) {\n      console.log(userId + password);\n        fetch('http://localhost:4000/auth/signin', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ userId, password }),\n        })\n        .then(response => response.json())\n        .then(data => {\n          if (data.accessToken) {\n            // JWT를 로컬 저장소에 저장\n            localStorage.setItem('accessToken', data.accessToken);\n          } else {\n            console.error('JWT를 받아오지 못했습니다.');\n          }\n        })\n        .catch(error => console.error('로그인 에러:', error));\n      }\n\n      // fetchUserData() {\n      //   const jwt = localStorage.getItem('jwt');\n        \n      //   fetch('https://yourapi.com/user/data', {\n      //     headers: {\n      //       'Authorization': `Bearer ${jwt}`,\n      //     },\n      //   })\n      //   .then(response => response.json())\n      //   .then(data => {\n      //     console.log(data);\n      //   })\n      //   .catch(error => console.error('데이터 요청 에러:', error));\n      // }\n\n      logout() {\n        // 로컬 저장소에서 JWT 삭제\n        localStorage.removeItem('accessToken');\n        window.location.href = '/';\n        // 로그아웃 처리를 위해 서버에 요청을 보냄\n        fetch('http://localhost:4000/auth/signout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          },\n        })\n        .then(() => {\n          console.log('로그아웃 되었습니다.');\n        })\n        .catch(error => console.error('로그아웃 에러:', error));\n      }\n      changepass(email,password){\n         fetch('http://localhost:4000/auth/changepass', {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({email,password}),\n         })\n         .then(()=>{\n          console.log('비밀번호가 변경되었습니다.');\n         })\n         .catch(error => console.error(\"잘못된요청: \",error));\n      }     \n}\n\nexport default AuthService;\n"],"mappings":"AAAA,MAAMA,WAAW,CAAC;EAEdC,MAAMA,CAACC,MAAM,EAACC,QAAQ,EAACC,QAAQ,EAACC,KAAK,EAAC;IACpCC,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAACC,QAAQ;QAACC,QAAQ;QAACC;MAAK,CAAC;IACtD,CAAC,CAAC;EACN;EAEAO,KAAKA,CAACV,MAAM,EAAEE,QAAQ,EAAE;IACtBS,OAAO,CAACC,GAAG,CAACZ,MAAM,GAAGE,QAAQ,CAAC;IAC5BE,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAAEE;MAAS,CAAC;IAC3C,CAAC,CAAC,CACDW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ,IAAIA,IAAI,CAACC,WAAW,EAAE;QACpB;QACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACC,WAAW,CAAC;MACvD,CAAC,MAAM;QACLN,OAAO,CAACS,KAAK,CAAC,kBAAkB,CAAC;MACnC;IACF,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAIT,OAAO,CAACS,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC,CAAC;EAClD;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAE,MAAMA,CAAA,EAAG;IACP;IACAJ,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;IACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC1B;IACAtB,KAAK,CAAC,oCAAoC,EAAE;MAC1CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAG,UAASY,YAAY,CAACS,OAAO,CAAC,aAAa,CAAE;MACjE;IACF,CAAC,CAAC,CACDd,IAAI,CAAC,MAAM;MACVF,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC5B,CAAC,CAAC,CACDS,KAAK,CAACD,KAAK,IAAIT,OAAO,CAACS,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC,CAAC;EACnD;EACAQ,UAAUA,CAACzB,KAAK,EAACD,QAAQ,EAAC;IACvBE,KAAK,CAAC,uCAAuC,EAAE;MAC5CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACN,KAAK;QAACD;MAAQ,CAAC;IACxC,CAAC,CAAC,CACDW,IAAI,CAAC,MAAI;MACTF,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC9B,CAAC,CAAC,CACDS,KAAK,CAACD,KAAK,IAAIT,OAAO,CAACS,KAAK,CAAC,SAAS,EAACA,KAAK,CAAC,CAAC;EAClD;AACN;AAEA,eAAetB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
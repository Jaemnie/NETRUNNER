{"ast":null,"code":"import io from'socket.io-client';class SocketResult{constructor(){// Token은 인스턴스가 생성될 때 한 번만 설정되어야 합니다.\nconst token=localStorage.getItem('accessToken');// this.socket을 사용해 클래스 내 다른 메소드에서도 소켓에 접근할 수 있습니다.\nthis.socket=io('netrunner.life:4000/term',{query:{token}});// NestJS 서버 주소\n// 메시지 리스너를 여기서 한번만 등록합니다.\nthis.socket.on('message',data=>{if(this.onMessageReceived){this.onMessageReceived(data);}});}joinRoom(id){this.roomId=id;this.socket.emit('join',{roomId:\"\".concat(id,\"roomId\")});}getRoomId(){return this.roomId;}// 메시지를 받는 메소드\ngetMessage(callback){this.onMessageReceived=callback;}// 메시지를 보내는 메소드\nsendMessage(message){this.socket.emit('message',{roomId:\"\".concat(this.roomId,\"roomId\"),payload:\"\".concat(message)});}leaveRoom(){this.socket.emit('leave',{roomId:\"\".concat(this.roomId)});}}export{SocketResult};","map":{"version":3,"names":["io","SocketResult","constructor","token","localStorage","getItem","socket","query","on","data","onMessageReceived","joinRoom","id","roomId","emit","concat","getRoomId","getMessage","callback","sendMessage","message","payload","leaveRoom"],"sources":["C:/Users/USER/Documents/GitHub/NETRUNNER/src/components/socket.jsx"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nclass SocketResult {\r\n    constructor() {\r\n        // Token은 인스턴스가 생성될 때 한 번만 설정되어야 합니다.\r\n        const token = localStorage.getItem('accessToken');\r\n        // this.socket을 사용해 클래스 내 다른 메소드에서도 소켓에 접근할 수 있습니다.\r\n        this.socket = io('netrunner.life:4000/term', {\r\n            query: { token }\r\n        }); // NestJS 서버 주소\r\n\r\n        // 메시지 리스너를 여기서 한번만 등록합니다.\r\n        this.socket.on('message', (data) => {\r\n            if(this.onMessageReceived) {\r\n                this.onMessageReceived(data);\r\n            }\r\n        });\r\n    }\r\n     joinRoom(id){\r\n        this.roomId = id;\r\n        this.socket.emit('join',{roomId:`${id}roomId`});\r\n    }\r\n     getRoomId(){\r\n        return this.roomId;\r\n    }\r\n    // 메시지를 받는 메소드\r\n     getMessage(callback) {\r\n        this.onMessageReceived = callback;\r\n    }\r\n\r\n    // 메시지를 보내는 메소드\r\n     sendMessage(message) {\r\n        this.socket.emit('message', {roomId:`${this.roomId}roomId`,payload:`${message}`});\r\n    }\r\n\r\n     leaveRoom(){\r\n        this.socket.emit('leave',{roomId:`${this.roomId}`});\r\n    }\r\n}\r\n\r\nexport { SocketResult };\r\n"],"mappings":"AAAA,MAAO,CAAAA,EAAE,KAAM,kBAAkB,CAEjC,KAAM,CAAAC,YAAa,CACfC,WAAWA,CAAA,CAAG,CACV;AACA,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CACjD;AACA,IAAI,CAACC,MAAM,CAAGN,EAAE,CAAC,0BAA0B,CAAE,CACzCO,KAAK,CAAE,CAAEJ,KAAM,CACnB,CAAC,CAAC,CAAE;AAEJ;AACA,IAAI,CAACG,MAAM,CAACE,EAAE,CAAC,SAAS,CAAGC,IAAI,EAAK,CAChC,GAAG,IAAI,CAACC,iBAAiB,CAAE,CACvB,IAAI,CAACA,iBAAiB,CAACD,IAAI,CAAC,CAChC,CACJ,CAAC,CAAC,CACN,CACCE,QAAQA,CAACC,EAAE,CAAC,CACT,IAAI,CAACC,MAAM,CAAGD,EAAE,CAChB,IAAI,CAACN,MAAM,CAACQ,IAAI,CAAC,MAAM,CAAC,CAACD,MAAM,IAAAE,MAAA,CAAIH,EAAE,UAAQ,CAAC,CAAC,CACnD,CACCI,SAASA,CAAA,CAAE,CACR,MAAO,KAAI,CAACH,MAAM,CACtB,CACA;AACCI,UAAUA,CAACC,QAAQ,CAAE,CAClB,IAAI,CAACR,iBAAiB,CAAGQ,QAAQ,CACrC,CAEA;AACCC,WAAWA,CAACC,OAAO,CAAE,CAClB,IAAI,CAACd,MAAM,CAACQ,IAAI,CAAC,SAAS,CAAE,CAACD,MAAM,IAAAE,MAAA,CAAI,IAAI,CAACF,MAAM,UAAQ,CAACQ,OAAO,IAAAN,MAAA,CAAIK,OAAO,CAAE,CAAC,CAAC,CACrF,CAECE,SAASA,CAAA,CAAE,CACR,IAAI,CAAChB,MAAM,CAACQ,IAAI,CAAC,OAAO,CAAC,CAACD,MAAM,IAAAE,MAAA,CAAI,IAAI,CAACF,MAAM,CAAE,CAAC,CAAC,CACvD,CACJ,CAEA,OAASZ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"class AuthService {\n  signup(userId, username, password, email) {\n    fetch('http://localhost:4000/auth/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        username,\n        password,\n        email\n      })\n    }).then(() => {\n      console.log('비밀번호가 변경되었습니다.');\n    }).catch(error => console.error(\"회원가입 에러:\", error));\n  }\n  login(userId, password) {\n    fetch('http://localhost:4000/auth/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.accessToken) {\n        // JWT를 로컬 저장소에 저장\n        localStorage.setItem('accessToken', data.accessToken);\n      } else {\n        Navigate('/');\n        console.error('JWT를 받아오지 못했습니다.');\n      }\n    }).catch(error => console.error('로그인 에러:', error));\n  }\n\n  // fetchUserData() {\n  //   const jwt = localStorage.getItem('jwt');\n\n  //   fetch('https://yourapi.com/user/data', {\n  //     headers: {\n  //       'Authorization': `Bearer ${jwt}`,\n  //     },\n  //   })\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     console.log(data);\n  //   })\n  //   .catch(error => console.error('데이터 요청 에러:', error));\n  // }\n\n  logout() {\n    // 로컬 저장소에서 JWT 삭제\n    localStorage.removeItem('accessToken');\n    window.location.href = '/';\n    // 로그아웃 처리를 위해 서버에 요청을 보냄\n    fetch('http://localhost:4000/auth/signout', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    }).then(() => {\n      console.log('로그아웃 되었습니다.');\n    }).catch(error => console.error('로그아웃 에러:', error));\n  }\n  changepass(email, password) {\n    fetch('http://localhost:4000/auth/changepass', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(() => {\n      console.log('비밀번호가 변경되었습니다.');\n    }).catch(error => console.error(\"잘못된요청: \", error));\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["AuthService","signup","userId","username","password","email","fetch","method","headers","body","JSON","stringify","then","console","log","catch","error","login","response","json","data","accessToken","localStorage","setItem","Navigate","logout","removeItem","window","location","href","getItem","changepass"],"sources":["C:/Users/USER/Documents/GitHub/NETRUNNER/src/services/AuthService.jsx"],"sourcesContent":["class AuthService {\r\n\r\n    signup(userId,username,password,email){\r\n      fetch('http://localhost:4000/auth/signup', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId,username,password,email}),\r\n        })\r\n        .then(()=>{\r\n          console.log('비밀번호가 변경되었습니다.')})\r\n        .catch(error => console.error(\"회원가입 에러:\",error));\r\n    }\r\n\r\n    login(userId, password) {\r\n        fetch('http://localhost:4000/auth/signin', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ userId, password }),\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if (data.accessToken) {\r\n            // JWT를 로컬 저장소에 저장\r\n            localStorage.setItem('accessToken', data.accessToken);\r\n          } else {\r\n            Navigate('/');\r\n            console.error('JWT를 받아오지 못했습니다.');\r\n          }\r\n        })\r\n        .catch(error => console.error('로그인 에러:', error));\r\n      }\r\n\r\n      // fetchUserData() {\r\n      //   const jwt = localStorage.getItem('jwt');\r\n        \r\n      //   fetch('https://yourapi.com/user/data', {\r\n      //     headers: {\r\n      //       'Authorization': `Bearer ${jwt}`,\r\n      //     },\r\n      //   })\r\n      //   .then(response => response.json())\r\n      //   .then(data => {\r\n      //     console.log(data);\r\n      //   })\r\n      //   .catch(error => console.error('데이터 요청 에러:', error));\r\n      // }\r\n\r\n      logout() {\r\n        // 로컬 저장소에서 JWT 삭제\r\n        localStorage.removeItem('accessToken');\r\n        window.location.href = '/';\r\n        // 로그아웃 처리를 위해 서버에 요청을 보냄\r\n        fetch('http://localhost:4000/auth/signout', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n          },\r\n        })\r\n        .then(() => {\r\n          console.log('로그아웃 되었습니다.');\r\n        })\r\n        .catch(error => console.error('로그아웃 에러:', error));\r\n      }\r\n      changepass(email,password){\r\n         fetch('http://localhost:4000/auth/changepass', {\r\n            method: 'PATCH',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({email,password}),\r\n         })\r\n         .then(()=>{\r\n          console.log('비밀번호가 변경되었습니다.');\r\n         })\r\n         .catch(error => console.error(\"잘못된요청: \",error));\r\n      }     \r\n}\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,MAAMA,WAAW,CAAC;EAEdC,MAAMA,CAACC,MAAM,EAACC,QAAQ,EAACC,QAAQ,EAACC,KAAK,EAAC;IACpCC,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAACC,QAAQ;QAACC,QAAQ;QAACC;MAAK,CAAC;IACtD,CAAC,CAAC,CACDO,IAAI,CAAC,MAAI;MACRC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAAA,CAAC,CAAC,CAChCC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,UAAU,EAACA,KAAK,CAAC,CAAC;EACpD;EAEAC,KAAKA,CAACf,MAAM,EAAEE,QAAQ,EAAE;IACpBE,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,MAAM;QAAEE;MAAS,CAAC;IAC3C,CAAC,CAAC,CACDQ,IAAI,CAACM,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACQ,IAAI,IAAI;MACZ,IAAIA,IAAI,CAACC,WAAW,EAAE;QACpB;QACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACC,WAAW,CAAC;MACvD,CAAC,MAAM;QACLG,QAAQ,CAAC,GAAG,CAAC;QACbX,OAAO,CAACG,KAAK,CAAC,kBAAkB,CAAC;MACnC;IACF,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC,CAAC;EAClD;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAS,MAAMA,CAAA,EAAG;IACP;IACAH,YAAY,CAACI,UAAU,CAAC,aAAa,CAAC;IACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC1B;IACAvB,KAAK,CAAC,oCAAoC,EAAE;MAC1CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAG,UAASc,YAAY,CAACQ,OAAO,CAAC,aAAa,CAAE;MACjE;IACF,CAAC,CAAC,CACDlB,IAAI,CAAC,MAAM;MACVC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC,CAAC;EACnD;EACAe,UAAUA,CAAC1B,KAAK,EAACD,QAAQ,EAAC;IACvBE,KAAK,CAAC,uCAAuC,EAAE;MAC5CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACN,KAAK;QAACD;MAAQ,CAAC;IACxC,CAAC,CAAC,CACDQ,IAAI,CAAC,MAAI;MACTC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,SAAS,EAACA,KAAK,CAAC,CAAC;EAClD;AACN;AAEA,eAAehB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
import { FileSystem } from "../lib/fileSystems.js";
document.addEventListener('DOMContentLoaded', termi);
function termi() {
    const terminal = new Terminal();
    terminal.open(document.getElementById('term'));
    let currentInput = '';
    terminal.write('Welcome to NetRunner!\r\n');
    let currentPath = '/home/user';
    const fs = new FileSystem();
    fs.createDirectory("/root");
    fs.createDirectory("/tmp");
    fs.createDirectory("/home/user")
    fs.createFile("/home/user/file1.txt");
    fs.createFile("/home/user/file2.txt");
    fs.createDirectory("/home/user/documents");
    fs.createFile("/home/user/documents/document1.txt");
    prompt(currentPath);
    terminal.onKey(({ key, domEvent }) => {
        const char = key;
        if (domEvent.keyCode === 13) {  // Enter key
            terminal.writeln('');
            const command = currentInput.trim().split(" ");
            switch (command[0]) {
                case 'pwd':
                    terminal.write(fs.getPathInfo(currentPath).absolutePath + '\r\n');
                    break;
                case 'cd':
                    console.log(command[1]);
                    if (command[1] === undefined) {
                        currentPath = "/root";
                    } else if (command[1] == '..') {
                        if (currentPath == '/') {
                            currentPath = '/';
                        } else {
                            let lastPath = currentPath.lastIndexOf("/");
                            let temp = currentPath.substring(0, lastPath);
                            currentPath = temp;
                        }
                    } else if (fs.isOverlap(command[1], currentPath) == false) {
                        currentPath += "/" + command[1];
                    } else if (fs.findDirectory(command[1]) == true) {
                        currentPath = command[1];
                    } else {
                        terminal.write("No such path found\r\n");
                    }
                    console.log(currentPath);
                    break;
                case 'cat':
                    break;
                case 'ls':
                    for (const key in fs.getPathInfo(currentPath).files) {
                        terminal.write(fs.getPathInfo(currentPath).files[key]);
                        if (command[1] == "-al") {
                            terminal.write("[" + fs.getPathInfo(currentPath).filestype[key] + "]");
                        }
                        terminal.write(" ");
                    }
                    terminal.write("\r\n");
                    break;
                case 'help':
                    terminal.write('Commands:\r\nls - List files\r\nhelp - Show this help message\r\n');
                    break;
                case 'cp':
                    break;
                case 'mv':
                    break;
                case 'rm':
                    break;
                case 'clear':
                    terminal.clear();
                    break;
                default:
                    terminal.write('Unknown command\r\n');
                    break;
            }
            currentInput = '';
            prompt(currentPath);
        } else if (domEvent.keyCode === 8) {
            // Backspace 처리
            if (currentInput.length > 0) {
                terminal.write('\b \b'); // 터미널에서 문자를 제거
                currentInput = currentInput.slice(0, -1);
            }
        } else {
            currentInput += char;
            terminal.write(char);
        }
    });
    function prompt(location) {
        if (location == "/root") {
            location = '~';
        }
        terminal.write(`root@root[${location}]$`);
    }
}

